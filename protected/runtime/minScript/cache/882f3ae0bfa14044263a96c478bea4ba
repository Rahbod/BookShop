a:2:{i:0;s:183017:"1472554297|
/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

(function() {
  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  noop = function() {};

  Emitter = (function() {
    function Emitter() {}

    Emitter.prototype.addEventListener = Emitter.prototype.on;

    Emitter.prototype.on = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (!this._callbacks[event]) {
        this._callbacks[event] = [];
      }
      this._callbacks[event].push(fn);
      return this;
    };

    Emitter.prototype.emit = function() {
      var args, callback, callbacks, event, _i, _len;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._callbacks = this._callbacks || {};
      callbacks = this._callbacks[event];
      if (callbacks) {
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback.apply(this, args);
        }
      }
      return this;
    };

    Emitter.prototype.removeListener = Emitter.prototype.off;

    Emitter.prototype.removeAllListeners = Emitter.prototype.off;

    Emitter.prototype.removeEventListener = Emitter.prototype.off;

    Emitter.prototype.off = function(event, fn) {
      var callback, callbacks, i, _i, _len;
      if (!this._callbacks || arguments.length === 0) {
        this._callbacks = {};
        return this;
      }
      callbacks = this._callbacks[event];
      if (!callbacks) {
        return this;
      }
      if (arguments.length === 1) {
        delete this._callbacks[event];
        return this;
      }
      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
        callback = callbacks[i];
        if (callback === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      return this;
    };

    return Emitter;

  })();

  Dropzone = (function(_super) {
    var extend, resolveOption;

    __extends(Dropzone, _super);

    Dropzone.prototype.Emitter = Emitter;


    /*
    This is a list of all available events you can register on a dropzone object.
    
    You can register an event handler like this:
    
        dropzone.on("dragEnter", function() { });
     */

    Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

    Dropzone.prototype.defaultOptions = {
      url: null,
      method: "post",
      withCredentials: false,
      parallelUploads: 2,
      uploadMultiple: false,
      maxFilesize: 256,
      paramName: "file",
      createImageThumbnails: true,
      maxThumbnailFilesize: 10,
      thumbnailWidth: 120,
      thumbnailHeight: 120,
      filesizeBase: 1000,
      maxFiles: null,
      params: {},
      clickable: true,
      ignoreHiddenFiles: true,
      acceptedFiles: null,
      acceptedMimeTypes: null,
      autoProcessQueue: true,
      autoQueue: true,
      addRemoveLinks: false,
      previewsContainer: null,
      hiddenInputContainer: "body",
      capture: null,
      dictDefaultMessage: "Drop files here to upload",
      dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
      dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
      dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
      dictInvalidFileType: "You can't upload files of this type.",
      dictResponseError: "Server responded with {{statusCode}} code.",
      dictCancelUpload: "Cancel upload",
      dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
      dictRemoveFile: "<span class=\"icon icon-lock\"></span>",
      dictRemoveFileConfirmation: null,
      dictMaxFilesExceeded: "You can not upload any more files.",
      accept: function(file, done) {
        return done();
      },
      init: function() {
        return noop;
      },
      forceFallback: false,
      fallback: function() {
        var child, messageElement, span, _i, _len, _ref;
        this.element.className = "" + this.element.className + " dz-browser-not-supported";
        _ref = this.element.getElementsByTagName("div");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (/(^| )dz-message($| )/.test(child.className)) {
            messageElement = child;
            child.className = "dz-message";
            continue;
          }
        }
        if (!messageElement) {
          messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
          this.element.appendChild(messageElement);
        }
        span = messageElement.getElementsByTagName("span")[0];
        if (span) {
          if (span.textContent != null) {
            span.textContent = this.options.dictFallbackMessage;
          } else if (span.innerText != null) {
            span.innerText = this.options.dictFallbackMessage;
          }
        }
        return this.element.appendChild(this.getFallbackForm());
      },
      resize: function(file) {
        var info, srcRatio, trgRatio;
        info = {
          srcX: 0,
          srcY: 0,
          srcWidth: file.width,
          srcHeight: file.height
        };
        srcRatio = file.width / file.height;
          info.optWidth = this.options.thumbnailWidth;
        info.optHeight = this.options.thumbnailHeight;
        if ((info.optWidth == null) && (info.optHeight == null)) {
          info.optWidth = info.srcWidth;
          info.optHeight = info.srcHeight;
        } else if (info.optWidth == null) {
          info.optWidth = srcRatio * info.optHeight;
        } else if (info.optHeight == null) {
          info.optHeight = (1 / srcRatio) * info.optWidth;
        }
        trgRatio = info.optWidth / info.optHeight;
        if (file.height < info.optHeight || file.width < info.optWidth) {
          info.trgHeight = info.srcHeight;
          info.trgWidth = info.srcWidth;
        } else {
          if (srcRatio > trgRatio) {
            info.srcHeight = file.height;
            info.srcWidth = info.srcHeight * trgRatio;
          } else {
            info.srcWidth = file.width;
            info.srcHeight = info.srcWidth / trgRatio;
          }
        }
        info.srcX = (file.width - info.srcWidth) / 2;
        info.srcY = (file.height - info.srcHeight) / 2;
        return info;
      },

      /*
      Those functions register themselves to the events on init and handle all
      the user interface specific stuff. Overwriting them won't break the upload
      but can break the way it's displayed.
      You can overwrite them if you don't like the default behavior. If you just
      want to add an additional event handler, register it on the dropzone object
      and don't overwrite those options.
       */
      drop: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragstart: noop,
      dragend: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      dragenter: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragover: function(e) {
        return this.element.classList.add("dz-drag-hover");
      },
      dragleave: function(e) {
        return this.element.classList.remove("dz-drag-hover");
      },
      paste: noop,
      reset: function() {
        return this.element.classList.remove("dz-started");
      },
      addedfile: function(file) {
        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        if (this.element === this.previewsContainer) {
          this.element.classList.add("dz-started");
        }
        if (this.previewsContainer) {
          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
          file.previewTemplate = file.previewElement;
          this.previewsContainer.appendChild(file.previewElement);
          _ref = file.previewElement.querySelectorAll("[data-dz-name]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            node.textContent = file.name;
          }
          _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            node = _ref1[_j];
            node.innerHTML = this.filesize(file.size);
          }
          if (this.options.addRemoveLinks) {
            file._removeLink = Dropzone.createElement("<a class=\"dz-remove icon icon-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
            file.previewElement.appendChild(file._removeLink);
          }
          removeFileEvent = (function(_this) {
            return function(e) {
              e.preventDefault();
              e.stopPropagation();
              if (file.status === Dropzone.UPLOADING) {
                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                  return _this.removeFile(file);
                });
              } else {
                if (_this.options.dictRemoveFileConfirmation) {
                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                    return _this.removeFile(file);
                  });
                } else {
                  return _this.removeFile(file);
                }
              }
            };
          })(this);
          _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            removeLink = _ref2[_k];
            _results.push(removeLink.addEventListener("click", removeFileEvent));
          }
          return _results;
        }
      },
      removedfile: function(file) {
        var _ref;
        if (file.previewElement) {
          if ((_ref = file.previewElement) != null) {
            _ref.parentNode.removeChild(file.previewElement);
          }
        }
        return this._updateMaxFilesReachedClass();
      },
      thumbnail: function(file, dataUrl) {
        var thumbnailElement, _i, _len, _ref;
        if (file.previewElement) {
          file.previewElement.classList.remove("dz-file-preview");
          _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnailElement = _ref[_i];
            thumbnailElement.alt = file.name;
            thumbnailElement.src = dataUrl;
          }
          return setTimeout(((function(_this) {
            return function() {
              return file.previewElement.classList.add("dz-image-preview");
            };
          })(this)), 1);
        }
      },
      error: function(file, message) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          file.previewElement.classList.add("dz-error");
          if (typeof message !== "String" && message.error) {
            message = message.error;
          }
          _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            _results.push(node.textContent = message);
          }
          return _results;
        }
      },
      errormultiple: noop,
      processing: function(file) {
        if (file.previewElement) {
          file.previewElement.classList.add("dz-processing");
          if (file._removeLink) {
            return file._removeLink.textContent = this.options.dictCancelUpload;
          }
        }
      },
      processingmultiple: noop,
      uploadprogress: function(file, progress, bytesSent) {
        var node, _i, _len, _ref, _results;
        if (file.previewElement) {
          _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            if (node.nodeName === 'PROGRESS') {
              _results.push(node.value = progress);
            } else {
              _results.push(node.style.width = "" + progress + "%");
            }
          }
          return _results;
        }
      },
      totaluploadprogress: noop,
      sending: noop,
      sendingmultiple: noop,
      success: function(file) {
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-success");
        }
      },
      successmultiple: noop,
      canceled: function(file) {
        return this.emit("error", file, "Upload canceled.");
      },
      canceledmultiple: noop,
      complete: function(file) {
        if (file._removeLink) {
          file._removeLink.textContent = this.options.dictRemoveFile;
        }
        if (file.previewElement) {
          return file.previewElement.classList.add("dz-complete");
        }
      },
      completemultiple: noop,
      maxfilesexceeded: noop,
      maxfilesreached: noop,
      queuecomplete: noop,
      addedfiles: noop,
      previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
    };

    extend = function() {
      var key, object, objects, target, val, _i, _len;
      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        for (key in object) {
          val = object[key];
          target[key] = val;
        }
      }
      return target;
    };

    function Dropzone(element, options) {
      var elementOptions, fallback, _ref;
      this.element = element;
      this.version = Dropzone.version;
      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
      this.clickableElements = [];
      this.listeners = [];
      this.files = [];
      if (typeof this.element === "string") {
        this.element = document.querySelector(this.element);
      }
      if (!(this.element && (this.element.nodeType != null))) {
        throw new Error("Invalid dropzone element.");
      }
      if (this.element.dropzone) {
        throw new Error("Dropzone already attached.");
      }
      Dropzone.instances.push(this);
      this.element.dropzone = this;
      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
        return this.options.fallback.call(this);
      }
      if (this.options.url == null) {
        this.options.url = this.element.getAttribute("action");
      }
      if (!this.options.url) {
        throw new Error("No URL provided.");
      }
      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
      }
      if (this.options.acceptedMimeTypes) {
        this.options.acceptedFiles = this.options.acceptedMimeTypes;
        delete this.options.acceptedMimeTypes;
      }
      this.options.method = this.options.method.toUpperCase();
      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
        fallback.parentNode.removeChild(fallback);
      }
      if (this.options.previewsContainer !== false) {
        if (this.options.previewsContainer) {
          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
        } else {
          this.previewsContainer = this.element;
        }
      }
      if (this.options.clickable) {
        if (this.options.clickable === true) {
          this.clickableElements = [this.element];
        } else {
          this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
        }
      }
      this.init();
    }

    Dropzone.prototype.getAcceptedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getRejectedFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (!file.accepted) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getFilesWithStatus = function(status) {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === status) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.getQueuedFiles = function() {
      return this.getFilesWithStatus(Dropzone.QUEUED);
    };

    Dropzone.prototype.getUploadingFiles = function() {
      return this.getFilesWithStatus(Dropzone.UPLOADING);
    };

    Dropzone.prototype.getAddedFiles = function() {
      return this.getFilesWithStatus(Dropzone.ADDED);
    };

    Dropzone.prototype.getActiveFiles = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dropzone.prototype.init = function() {
      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
      if (this.element.tagName === "form") {
        this.element.setAttribute("enctype", "multipart/form-data");
      }
      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span style='display: block;'>" + this.options.dictDefaultMessage + "</span>"+((this.options.maxFiles=='null')?"":"<span style='font-size:11px;display: block;'>تعداد فایل مجاز : "+this.options.maxFiles+"</span>")+"<span class='dz-accepted' >" + this.options.acceptedFiles + "</span></div>"));
      }
      if (this.clickableElements.length) {
        setupHiddenFileInput = (function(_this) {
          return function() {
            if (_this.hiddenFileInput) {
              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);
            }
            _this.hiddenFileInput = document.createElement("input");
            _this.hiddenFileInput.setAttribute("type", "file");
            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
              _this.hiddenFileInput.setAttribute("multiple", "multiple");
            }
            _this.hiddenFileInput.className = "dz-hidden-input";
            if (_this.options.acceptedFiles != null) {
              _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
            }
            if (_this.options.capture != null) {
              _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
            }
            _this.hiddenFileInput.style.visibility = "hidden";
            _this.hiddenFileInput.style.position = "absolute";
            _this.hiddenFileInput.style.top = "0";
            _this.hiddenFileInput.style.left = "0";
            _this.hiddenFileInput.style.height = "0";
            _this.hiddenFileInput.style.width = "0";
            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);
            return _this.hiddenFileInput.addEventListener("change", function() {
              var file, files, _i, _len;
              files = _this.hiddenFileInput.files;
              if (files.length) {
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _this.addFile(file);
                }
              }
              _this.emit("addedfiles", files);
              return setupHiddenFileInput();
            });
          };
        })(this);
        setupHiddenFileInput();
      }
      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
      _ref1 = this.events;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        eventName = _ref1[_i];
        this.on(eventName, this.options[eventName]);
      }
      this.on("uploadprogress", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("removedfile", (function(_this) {
        return function() {
          return _this.updateTotalUploadProgress();
        };
      })(this));
      this.on("canceled", (function(_this) {
        return function(file) {
          return _this.emit("complete", file);
        };
      })(this));
      this.on("complete", (function(_this) {
        return function(file) {
          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
            return setTimeout((function() {
              return _this.emit("queuecomplete");
            }), 0);
          }
        };
      })(this));
      noPropagation = function(e) {
        e.stopPropagation();
        if (e.preventDefault) {
          return e.preventDefault();
        } else {
          return e.returnValue = false;
        }
      };
      this.listeners = [
        {
          element: this.element,
          events: {
            "dragstart": (function(_this) {
              return function(e) {
                return _this.emit("dragstart", e);
              };
            })(this),
            "dragenter": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.emit("dragenter", e);
              };
            })(this),
            "dragover": (function(_this) {
              return function(e) {
                var efct;
                try {
                  efct = e.dataTransfer.effectAllowed;
                } catch (_error) {}
                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                noPropagation(e);
                return _this.emit("dragover", e);
              };
            })(this),
            "dragleave": (function(_this) {
              return function(e) {
                return _this.emit("dragleave", e);
              };
            })(this),
            "drop": (function(_this) {
              return function(e) {
                noPropagation(e);
                return _this.drop(e);
              };
            })(this),
            "dragend": (function(_this) {
              return function(e) {
                return _this.emit("dragend", e);
              };
            })(this)
          }
        }
      ];
      this.clickableElements.forEach((function(_this) {
        return function(clickableElement) {
          return _this.listeners.push({
            element: clickableElement,
            events: {
              "click": function(evt) {
                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                  _this.hiddenFileInput.click();
                }
                return true;
              }
            }
          });
        };
      })(this));
      this.enable();
      return this.options.init.call(this);
    };

    Dropzone.prototype.destroy = function() {
      var _ref;
      this.disable();
      this.removeAllFiles(true);
      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
        this.hiddenFileInput = null;
      }
      delete this.element.dropzone;
      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
    };

    Dropzone.prototype.updateTotalUploadProgress = function() {
      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
      totalBytesSent = 0;
      totalBytes = 0;
      activeFiles = this.getActiveFiles();
      if (activeFiles.length) {
        _ref = this.getActiveFiles();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          totalBytesSent += file.upload.bytesSent;
          totalBytes += file.upload.total;
        }
        totalUploadProgress = 100 * totalBytesSent / totalBytes;
      } else {
        totalUploadProgress = 100;
      }
      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
    };

    Dropzone.prototype._getParamName = function(n) {
      if (typeof this.options.paramName === "function") {
        return this.options.paramName(n);
      } else {
        return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
      }
    };

    Dropzone.prototype.getFallbackForm = function() {
      var existingFallback, fields, fieldsString, form;
      if (existingFallback = this.getExistingFallback()) {
        return existingFallback;
      }
      fieldsString = "<div class=\"dz-fallback\">";
      if (this.options.dictFallbackText) {
        fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
      }
      fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
      fields = Dropzone.createElement(fieldsString);
      if (this.element.tagName !== "FORM") {
        form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
        form.appendChild(fields);
      } else {
        this.element.setAttribute("enctype", "multipart/form-data");
        this.element.setAttribute("method", this.options.method);
      }
      return form != null ? form : fields;
    };

    Dropzone.prototype.getExistingFallback = function() {
      var fallback, getFallback, tagName, _i, _len, _ref;
      getFallback = function(elements) {
        var el, _i, _len;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )fallback($| )/.test(el.className)) {
            return el;
          }
        }
      };
      _ref = ["div", "form"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tagName = _ref[_i];
        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
          return fallback;
        }
      }
    };

    Dropzone.prototype.setupEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.addEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.removeEventListeners = function() {
      var elementListeners, event, listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elementListeners = _ref[_i];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = elementListeners.events;
          _results1 = [];
          for (event in _ref1) {
            listener = _ref1[event];
            _results1.push(elementListeners.element.removeEventListener(event, listener, false));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Dropzone.prototype.disable = function() {
      var file, _i, _len, _ref, _results;
      this.clickableElements.forEach(function(element) {
        return element.classList.remove("dz-clickable");
      });
      this.removeEventListeners();
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.cancelUpload(file));
      }
      return _results;
    };

    Dropzone.prototype.enable = function() {
      this.clickableElements.forEach(function(element) {
        return element.classList.add("dz-clickable");
      });
      return this.setupEventListeners();
    };

    Dropzone.prototype.filesize = function(size) {
      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
      selectedSize = 0;
      selectedUnit = "b";
      if (size > 0) {
        units = ['TB', 'GB', 'MB', 'KB', 'b'];
        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
          unit = units[i];
          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
          if (size >= cutoff) {
            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
            selectedUnit = unit;
            break;
          }
        }
        selectedSize = Math.round(10 * selectedSize) / 10;
      }
      return "<strong>" + selectedSize + "</strong> " + selectedUnit;
    };

    Dropzone.prototype._updateMaxFilesReachedClass = function() {
      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        if (this.getAcceptedFiles().length === this.options.maxFiles) {
          this.emit('maxfilesreached', this.files);
        }
        return this.element.classList.add("dz-max-files-reached");
      } else {
        return this.element.classList.remove("dz-max-files-reached");
      }
    };

    Dropzone.prototype.drop = function(e) {
      var files, items;
      if (!e.dataTransfer) {
        return;
      }
      this.emit("drop", e);
      files = e.dataTransfer.files;
      this.emit("addedfiles", files);
      if (files.length) {
        items = e.dataTransfer.items;
        if (items && items.length && (items[0].webkitGetAsEntry != null)) {
          this._addFilesFromItems(items);
        } else {
          this.handleFiles(files);
        }
      }
    };

    Dropzone.prototype.paste = function(e) {
      var items, _ref;
      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
        return;
      }
      this.emit("paste", e);
      items = e.clipboardData.items;
      if (items.length) {
        return this._addFilesFromItems(items);
      }
    };

    Dropzone.prototype.handleFiles = function(files) {
      var file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push(this.addFile(file));
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromItems = function(items) {
      var entry, item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
          if (entry.isFile) {
            _results.push(this.addFile(item.getAsFile()));
          } else if (entry.isDirectory) {
            _results.push(this._addFilesFromDirectory(entry, entry.name));
          } else {
            _results.push(void 0);
          }
        } else if (item.getAsFile != null) {
          if ((item.kind == null) || item.kind === "file") {
            _results.push(this.addFile(item.getAsFile()));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
      var dirReader, entriesReader;
      dirReader = directory.createReader();
      entriesReader = (function(_this) {
        return function(entries) {
          var entry, _i, _len;
          for (_i = 0, _len = entries.length; _i < _len; _i++) {
            entry = entries[_i];
            if (entry.isFile) {
              entry.file(function(file) {
                if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                  return;
                }
                file.fullPath = "" + path + "/" + file.name;
                return _this.addFile(file);
              });
            } else if (entry.isDirectory) {
              _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
            }
          }
        };
      })(this);
      return dirReader.readEntries(entriesReader, function(error) {
        return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
      });
    };

    Dropzone.prototype.accept = function(file, done) {
      if (file.size > this.options.maxFilesize * 1024 * 1024) {
          if(this.options.maxFilesize < 1)
            return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize*1024+' KB'));
          else
            return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize+' MB'));
      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
        return done(this.options.dictInvalidFileType);
      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
        return this.emit("maxfilesexceeded", file);
      } else {
        return this.options.accept.call(this, file, done);
      }
    };

    Dropzone.prototype.addFile = function(file) {
      file.upload = {
        progress: 0,
        total: file.size,
        bytesSent: 0
      };
      this.files.push(file);
      file.status = Dropzone.ADDED;
      this.emit("addedfile", file);
      this._enqueueThumbnail(file);
      return this.accept(file, (function(_this) {
        return function(error) {
          if (error) {
            file.accepted = false;
            _this._errorProcessing([file], error);
          } else {
            file.accepted = true;
            if (_this.options.autoQueue) {
              _this.enqueueFile(file);
            }
          }
          return _this._updateMaxFilesReachedClass();
        };
      })(this));
    };

    Dropzone.prototype.enqueueFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.enqueueFile(file);
      }
      return null;
    };

    Dropzone.prototype.enqueueFile = function(file) {
      if (file.status === Dropzone.ADDED && file.accepted === true) {
        file.status = Dropzone.QUEUED;
        if (this.options.autoProcessQueue) {
          return setTimeout(((function(_this) {
            return function() {
              return _this.processQueue();
            };
          })(this)), 0);
        }
      } else {
        throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
    };

    Dropzone.prototype._thumbnailQueue = [];

    Dropzone.prototype._processingThumbnail = false;

    Dropzone.prototype._enqueueThumbnail = function(file) {
      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        this._thumbnailQueue.push(file);
        return setTimeout(((function(_this) {
          return function() {
            return _this._processThumbnailQueue();
          };
        })(this)), 0);
      }
    };

    Dropzone.prototype._processThumbnailQueue = function() {
      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
        return;
      }
      this._processingThumbnail = true;
      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
        return function() {
          _this._processingThumbnail = false;
          return _this._processThumbnailQueue();
        };
      })(this));
    };

    Dropzone.prototype.removeFile = function(file) {
      if (file.status === Dropzone.UPLOADING) {
        this.cancelUpload(file);
      }
      this.files = without(this.files, file);
      this.emit("removedfile", file);
      if (this.files.length === 0) {
        return this.emit("reset");
      }
    };

    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
      var file, _i, _len, _ref;
      if (cancelIfNecessary == null) {
        cancelIfNecessary = false;
      }
      _ref = this.files.slice();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
          this.removeFile(file);
        }
      }
      return null;
    };

    Dropzone.prototype.createThumbnail = function(file, callback) {
      var fileReader;
      fileReader = new FileReader;
      fileReader.onload = (function(_this) {
        return function() {
          if (file.type === "image/svg+xml") {
            _this.emit("thumbnail", file, fileReader.result);
            if (callback != null) {
              callback();
            }
            return;
          }
          return _this.createThumbnailFromUrl(file, fileReader.result, callback);
        };
      })(this);
      return fileReader.readAsDataURL(file);
    };

    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {
      var img;
      img = document.createElement("img");
      if (crossOrigin) {
        img.crossOrigin = crossOrigin;
      }
      img.onload = (function(_this) {
        return function() {
          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
          file.width = img.width;
          file.height = img.height;
          resizeInfo = _this.options.resize.call(_this, file);
          if (resizeInfo.trgWidth == null) {
            resizeInfo.trgWidth = resizeInfo.optWidth;
          }
          if (resizeInfo.trgHeight == null) {
            resizeInfo.trgHeight = resizeInfo.optHeight;
          }
          canvas = document.createElement("canvas");
          ctx = canvas.getContext("2d");
          canvas.width = resizeInfo.trgWidth;
          canvas.height = resizeInfo.trgHeight;
          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
          thumbnail = canvas.toDataURL("image/png");
          _this.emit("thumbnail", file, thumbnail);
          if (callback != null) {
            return callback();
          }
        };
      })(this);
      if (callback != null) {
        img.onerror = callback;
      }
      return img.src = imageUrl;
    };

    Dropzone.prototype.processQueue = function() {
      var i, parallelUploads, processingLength, queuedFiles;
      parallelUploads = this.options.parallelUploads;
      processingLength = this.getUploadingFiles().length;
      i = processingLength;
      if (processingLength >= parallelUploads) {
        return;
      }
      queuedFiles = this.getQueuedFiles();
      if (!(queuedFiles.length > 0)) {
        return;
      }
      if (this.options.uploadMultiple) {
        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
      } else {
        while (i < parallelUploads) {
          if (!queuedFiles.length) {
            return;
          }
          this.processFile(queuedFiles.shift());
          i++;
        }
      }
    };

    Dropzone.prototype.processFile = function(file) {
      return this.processFiles([file]);
    };

    Dropzone.prototype.processFiles = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.processing = true;
        file.status = Dropzone.UPLOADING;
        this.emit("processing", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("processingmultiple", files);
      }
      return this.uploadFiles(files);
    };

    Dropzone.prototype._getFilesWithXhr = function(xhr) {
      var file, files;
      return files = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (file.xhr === xhr) {
            _results.push(file);
          }
        }
        return _results;
      }).call(this);
    };

    Dropzone.prototype.cancelUpload = function(file) {
      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
      if (file.status === Dropzone.UPLOADING) {
        groupedFiles = this._getFilesWithXhr(file.xhr);
        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
          groupedFile = groupedFiles[_i];
          groupedFile.status = Dropzone.CANCELED;
        }
        file.xhr.abort();
        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
          groupedFile = groupedFiles[_j];
          this.emit("canceled", groupedFile);
        }
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", groupedFiles);
        }
      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
        file.status = Dropzone.CANCELED;
        this.emit("canceled", file);
        if (this.options.uploadMultiple) {
          this.emit("canceledmultiple", [file]);
        }
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    resolveOption = function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof option === 'function') {
        return option.apply(this, args);
      }
      return option;
    };

    Dropzone.prototype.uploadFile = function(file) {
      return this.uploadFiles([file]);
    };

    Dropzone.prototype.uploadFiles = function(files) {
      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      xhr = new XMLHttpRequest();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.xhr = xhr;
      }
      method = resolveOption(this.options.method, files);
      url = resolveOption(this.options.url, files);
      xhr.open(method, url, true);
      xhr.withCredentials = !!this.options.withCredentials;
      response = null;
      handleError = (function(_this) {
        return function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
          }
          return _results;
        };
      })(this);
      updateProgress = (function(_this) {
        return function(e) {
          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
          if (e != null) {
            progress = 100 * e.loaded / e.total;
            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
              file = files[_j];
              file.upload = {
                progress: progress,
                total: e.total,
                bytesSent: e.loaded
              };
            }
          } else {
            allFilesFinished = true;
            progress = 100;
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                allFilesFinished = false;
              }
              file.upload.progress = progress;
              file.upload.bytesSent = file.upload.total;
            }
            if (allFilesFinished) {
              return;
            }
          }
          _results = [];
          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
            file = files[_l];
            _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
          }
          return _results;
        };
      })(this);
      xhr.onload = (function(_this) {
        return function(e) {
          var _ref;
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          if (xhr.readyState !== 4) {
            return;
          }
          response = xhr.responseText;
          if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
            try {
              response = JSON.parse(response);
            } catch (_error) {
              e = _error;
              response = "Invalid JSON response from server.";
            }
          }
          updateProgress();
          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
            return handleError();
          } else {
            return _this._finished(files, response, e);
          }
        };
      })(this);
      xhr.onerror = (function(_this) {
        return function() {
          if (files[0].status === Dropzone.CANCELED) {
            return;
          }
          return handleError();
        };
      })(this);
      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
      progressObj.onprogress = updateProgress;
      headers = {
        "Accept": "application/json",
        "Cache-Control": "no-cache",
        "X-Requested-With": "XMLHttpRequest"
      };
      if (this.options.headers) {
        extend(headers, this.options.headers);
      }
      for (headerName in headers) {
        headerValue = headers[headerName];
        if (headerValue) {
          xhr.setRequestHeader(headerName, headerValue);
        }
      }
      formData = new FormData();
      if (this.options.params) {
        _ref1 = this.options.params;
        for (key in _ref1) {
          value = _ref1[key];
          formData.append(key, value);
        }
      }
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        file = files[_j];
        this.emit("sending", file, xhr, formData);
      }
      if (this.options.uploadMultiple) {
        this.emit("sendingmultiple", files, xhr, formData);
      }
      if (this.element.tagName === "FORM") {
        _ref2 = this.element.querySelectorAll("input, textarea, select, button");
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          input = _ref2[_k];
          inputName = input.getAttribute("name");
          inputType = input.getAttribute("type");
          if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
            _ref3 = input.options;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              option = _ref3[_l];
              if (option.selected) {
                formData.append(inputName, option.value);
              }
            }
          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
            formData.append(inputName, input.value);
          }
        }
      }
      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
        formData.append(this._getParamName(i), files[i], files[i].name);
      }
      return this.submitRequest(xhr, formData, files);
    };

    Dropzone.prototype.submitRequest = function(xhr, formData, files) {
      return xhr.send(formData);
    };

    Dropzone.prototype._finished = function(files, responseText, e) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.SUCCESS;
        this.emit("success", file, responseText, e);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("successmultiple", files, responseText, e);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    Dropzone.prototype._errorProcessing = function(files, message, xhr) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        file.status = Dropzone.ERROR;
        this.emit("error", file, message, xhr);
        this.emit("complete", file);
      }
      if (this.options.uploadMultiple) {
        this.emit("errormultiple", files, message, xhr);
        this.emit("completemultiple", files);
      }
      if (this.options.autoProcessQueue) {
        return this.processQueue();
      }
    };

    return Dropzone;

  })(Emitter);

  Dropzone.version = "4.2.0";

  Dropzone.options = {};

  Dropzone.optionsForElement = function(element) {
    if (element.getAttribute("id")) {
      return Dropzone.options[camelize(element.getAttribute("id"))];
    } else {
      return void 0;
    }
  };

  Dropzone.instances = [];

  Dropzone.forElement = function(element) {
    if (typeof element === "string") {
      element = document.querySelector(element);
    }
    if ((element != null ? element.dropzone : void 0) == null) {
      throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    }
    return element.dropzone;
  };

  Dropzone.autoDiscover = true;

  Dropzone.discover = function() {
    var checkElements, dropzone, dropzones, _i, _len, _results;
    if (document.querySelectorAll) {
      dropzones = document.querySelectorAll(".dropzone");
    } else {
      dropzones = [];
      checkElements = function(elements) {
        var el, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          if (/(^| )dropzone($| )/.test(el.className)) {
            _results.push(dropzones.push(el));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      checkElements(document.getElementsByTagName("div"));
      checkElements(document.getElementsByTagName("form"));
    }
    _results = [];
    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
      dropzone = dropzones[_i];
      if (Dropzone.optionsForElement(dropzone) !== false) {
        _results.push(new Dropzone(dropzone));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

  Dropzone.isBrowserSupported = function() {
    var capableBrowser, regex, _i, _len, _ref;
    capableBrowser = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
      if (!("classList" in document.createElement("a"))) {
        capableBrowser = false;
      } else {
        _ref = Dropzone.blacklistedBrowsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          regex = _ref[_i];
          if (regex.test(navigator.userAgent)) {
            capableBrowser = false;
            continue;
          }
        }
      }
    } else {
      capableBrowser = false;
    }
    return capableBrowser;
  };

  without = function(list, rejectedItem) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (item !== rejectedItem) {
        _results.push(item);
      }
    }
    return _results;
  };

  camelize = function(str) {
    return str.replace(/[\-_](\w)/g, function(match) {
      return match.charAt(1).toUpperCase();
    });
  };

  Dropzone.createElement = function(string) {
    var div;
    div = document.createElement("div");
    div.innerHTML = string;
    return div.childNodes[0];
  };

  Dropzone.elementInside = function(element, container) {
    if (element === container) {
      return true;
    }
    while (element = element.parentNode) {
      if (element === container) {
        return true;
      }
    }
    return false;
  };

  Dropzone.getElement = function(el, name) {
    var element;
    if (typeof el === "string") {
      element = document.querySelector(el);
    } else if (el.nodeType != null) {
      element = el;
    }
    if (element == null) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
    }
    return element;
  };

  Dropzone.getElements = function(els, name) {
    var e, el, elements, _i, _j, _len, _len1, _ref;
    if (els instanceof Array) {
      elements = [];
      try {
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          elements.push(this.getElement(el, name));
        }
      } catch (_error) {
        e = _error;
        elements = null;
      }
    } else if (typeof els === "string") {
      elements = [];
      _ref = document.querySelectorAll(els);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        el = _ref[_j];
        elements.push(el);
      }
    } else if (els.nodeType != null) {
      elements = [els];
    }
    if (!((elements != null) && elements.length)) {
      throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
    }
    return elements;
  };

  Dropzone.confirm = function(question, accepted, rejected) {
    if (window.confirm(question)) {
      return accepted();
    } else if (rejected != null) {
      return rejected();
    }
  };

  Dropzone.isValidFile = function(file, acceptedFiles) {
    var baseMimeType, mimeType, validType, _i, _len;
    if (!acceptedFiles) {
      return true;
    }
    acceptedFiles = acceptedFiles.split(",");
    mimeType = file.type;
    baseMimeType = mimeType.replace(/\/.*$/, "");
    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
      validType = acceptedFiles[_i];
      validType = validType.trim();
      if (validType.charAt(0) === ".") {
        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
          return true;
        }
      } else if (/\/\*$/.test(validType)) {
        if (baseMimeType === validType.replace(/\/.*$/, "")) {
          return true;
        }
      } else {
        if (mimeType === validType) {
          return true;
        }
      }
    }
    return false;
  };

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.dropzone = function(options) {
      return this.each(function() {
        return new Dropzone(this, options);
      });
    };
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Dropzone;
  } else {
    window.Dropzone = Dropzone;
  }

  Dropzone.ADDED = "added";

  Dropzone.QUEUED = "queued";

  Dropzone.ACCEPTED = Dropzone.QUEUED;

  Dropzone.UPLOADING = "uploading";

  Dropzone.PROCESSING = Dropzone.UPLOADING;

  Dropzone.CANCELED = "canceled";

  Dropzone.ERROR = "error";

  Dropzone.SUCCESS = "success";


  /*
  
  Bugfix for iOS 6 and 7
  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
  based on the work of https://github.com/stomita/ios-imagefile-megapixel
   */

  detectVerticalSquash = function(img) {
    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
    iw = img.naturalWidth;
    ih = img.naturalHeight;
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = ih;
    ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    data = ctx.getImageData(0, 0, 1, ih).data;
    sy = 0;
    ey = ih;
    py = ih;
    while (py > sy) {
      alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = (ey + sy) >> 1;
    }
    ratio = py / ih;
    if (ratio === 0) {
      return 1;
    } else {
      return ratio;
    }
  };

  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    var vertSquashRatio;
    vertSquashRatio = detectVerticalSquash(img);
    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
  };


  /*
   * contentloaded.js
   *
   * Author: Diego Perini (diego.perini at gmail.com)
   * Summary: cross-browser wrapper for DOMContentLoaded
   * Updated: 20101020
   * License: MIT
   * Version: 1.2
   *
   * URL:
   * http://javascript.nwbox.com/ContentLoaded/
   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
   */

  contentLoaded = function(win, fn) {
    var add, doc, done, init, poll, pre, rem, root, top;
    done = false;
    top = true;
    doc = win.document;
    root = doc.documentElement;
    add = (doc.addEventListener ? "addEventListener" : "attachEvent");
    rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
    pre = (doc.addEventListener ? "" : "on");
    init = function(e) {
      if (e.type === "readystatechange" && doc.readyState !== "complete") {
        return;
      }
      (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
      if (!done && (done = true)) {
        return fn.call(win, e.type || e);
      }
    };
    poll = function() {
      var e;
      try {
        root.doScroll("left");
      } catch (_error) {
        e = _error;
        setTimeout(poll, 50);
        return;
      }
      return init("poll");
    };
    if (doc.readyState !== "complete") {
      if (doc.createEventObject && root.doScroll) {
        try {
          top = !win.frameElement;
        } catch (_error) {}
        if (top) {
          poll();
        }
      }
      doc[add](pre + "DOMContentLoaded", init, false);
      doc[add](pre + "readystatechange", init, false);
      return win[add](pre + "load", init, false);
    }
  };

  Dropzone._autoDiscoverFunction = function() {
    if (Dropzone.autoDiscover) {
      return Dropzone.discover();
    }
  };

  contentLoaded(window, Dropzone._autoDiscoverFunction);

}).call(this);
/*!
* Bootstrap.js by @fat & @mdo
* Copyright 2012 Twitter, Inc.
* http://www.apache.org/licenses/LICENSE-2.0.txt
*/
!function(e){e(function(){"use strict";e.support.transition=function(){var e=function(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},n;for(n in t)if(e.style[n]!==undefined)return t[n]}();return e&&{end:e}}()})}(window.jQuery),!function(e){"use strict";var t='[data-dismiss="alert"]',n=function(n){e(n).on("click",t,this.close)};n.prototype.close=function(t){function s(){i.trigger("closed").remove()}var n=e(this),r=n.attr("data-target"),i;r||(r=n.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),i=e(r),t&&t.preventDefault(),i.length||(i=n.hasClass("alert")?n:n.parent()),i.trigger(t=e.Event("close"));if(t.isDefaultPrevented())return;i.removeClass("in"),e.support.transition&&i.hasClass("fade")?i.on(e.support.transition.end,s):s()},e.fn.alert=function(t){return this.each(function(){var r=e(this),i=r.data("alert");i||r.data("alert",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.alert.Constructor=n,e(function(){e("body").on("click.alert.data-api",t,n.prototype.close)})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.button.defaults,n)};t.prototype.setState=function(e){var t="disabled",n=this.$element,r=n.data(),i=n.is("input")?"val":"html";e+="Text",r.resetText||n.data("resetText",n[i]()),n[i](r[e]||this.options[e]),setTimeout(function(){e=="loadingText"?n.addClass(t).attr(t,t):n.removeClass(t).removeAttr(t)},0)},t.prototype.toggle=function(){var e=this.$element.closest('[data-toggle="buttons-radio"]');e&&e.find(".active").removeClass("active"),this.$element.toggleClass("active")},e.fn.button=function(n){return this.each(function(){var r=e(this),i=r.data("button"),s=typeof n=="object"&&n;i||r.data("button",i=new t(this,s)),n=="toggle"?i.toggle():n&&i.setState(n)})},e.fn.button.defaults={loadingText:"loading..."},e.fn.button.Constructor=t,e(function(){e("body").on("click.button.data-api","[data-toggle^=button]",function(t){var n=e(t.target);n.hasClass("btn")||(n=n.closest(".btn")),n.button("toggle")})})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=n,this.options.slide&&this.slide(this.options.slide),this.options.pause=="hover"&&this.$element.on("mouseenter",e.proxy(this.pause,this)).on("mouseleave",e.proxy(this.cycle,this))};t.prototype={cycle:function(t){return t||(this.paused=!1),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},to:function(t){var n=this.$element.find(".item.active"),r=n.parent().children(),i=r.index(n),s=this;if(t>r.length-1||t<0)return;return this.sliding?this.$element.one("slid",function(){s.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",e(r[t]))},pause:function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition.end&&(this.$element.trigger(e.support.transition.end),this.cycle()),clearInterval(this.interval),this.interval=null,this},next:function(){if(this.sliding)return;return this.slide("next")},prev:function(){if(this.sliding)return;return this.slide("prev")},slide:function(t,n){var r=this.$element.find(".item.active"),i=n||r[t](),s=this.interval,o=t=="next"?"left":"right",u=t=="next"?"first":"last",a=this,f=e.Event("slide",{relatedTarget:i[0]});this.sliding=!0,s&&this.pause(),i=i.length?i:this.$element.find(".item")[u]();if(i.hasClass("active"))return;if(e.support.transition&&this.$element.hasClass("slide")){this.$element.trigger(f);if(f.isDefaultPrevented())return;i.addClass(t),i[0].offsetWidth,r.addClass(o),i.addClass(o),this.$element.one(e.support.transition.end,function(){i.removeClass([t,o].join(" ")).addClass("active"),r.removeClass(["active",o].join(" ")),a.sliding=!1,setTimeout(function(){a.$element.trigger("slid")},0)})}else{this.$element.trigger(f);if(f.isDefaultPrevented())return;r.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return s&&this.cycle(),this}},e.fn.carousel=function(n){return this.each(function(){var r=e(this),i=r.data("carousel"),s=e.extend({},e.fn.carousel.defaults,typeof n=="object"&&n),o=typeof n=="string"?n:s.slide;i||r.data("carousel",i=new t(this,s)),typeof n=="number"?i.to(n):o?i[o]():s.interval&&i.cycle()})},e.fn.carousel.defaults={interval:5e3,pause:"hover"},e.fn.carousel.Constructor=t,e(function(){e("body").on("click.carousel.data-api","[data-slide]",function(t){var n=e(this),r,i=e(n.attr("data-target")||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,"")),s=!i.data("modal")&&e.extend({},i.data(),n.data());i.carousel(s),t.preventDefault()})})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.collapse.defaults,n),this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};t.prototype={constructor:t,dimension:function(){var e=this.$element.hasClass("width");return e?"width":"height"},show:function(){var t,n,r,i;if(this.transitioning)return;t=this.dimension(),n=e.camelCase(["scroll",t].join("-")),r=this.$parent&&this.$parent.find("> .accordion-group > .in");if(r&&r.length){i=r.data("collapse");if(i&&i.transitioning)return;r.collapse("hide"),i||r.data("collapse",null)}this.$element[t](0),this.transition("addClass",e.Event("show"),"shown"),e.support.transition&&this.$element[t](this.$element[0][n])},hide:function(){var t;if(this.transitioning)return;t=this.dimension(),this.reset(this.$element[t]()),this.transition("removeClass",e.Event("hide"),"hidden"),this.$element[t](0)},reset:function(e){var t=this.dimension();return this.$element.removeClass("collapse")[t](e||"auto")[0].offsetWidth,this.$element[e!==null?"addClass":"removeClass"]("collapse"),this},transition:function(t,n,r){var i=this,s=function(){n.type=="show"&&i.reset(),i.transitioning=0,i.$element.trigger(r)};this.$element.trigger(n);if(n.isDefaultPrevented())return;this.transitioning=1,this.$element[t]("in"),e.support.transition&&this.$element.hasClass("collapse")?this.$element.one(e.support.transition.end,s):s()},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}},e.fn.collapse=function(n){return this.each(function(){var r=e(this),i=r.data("collapse"),s=typeof n=="object"&&n;i||r.data("collapse",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.collapse.defaults={toggle:!0},e.fn.collapse.Constructor=t,e(function(){e("body").on("click.collapse.data-api","[data-toggle=collapse]",function(t){var n=e(this),r,i=n.attr("data-target")||t.preventDefault()||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""),s=e(i).data("collapse")?"toggle":n.data();n[e(i).hasClass("in")?"addClass":"removeClass"]("collapsed"),e(i).collapse(s)})})}(window.jQuery),!function(e){"use strict";function r(){i(e(t)).removeClass("open")}function i(t){var n=t.attr("data-target"),r;return n||(n=t.attr("href"),n=n&&/#/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")),r=e(n),r.length||(r=t.parent()),r}var t="[data-toggle=dropdown]",n=function(t){var n=e(t).on("click.dropdown.data-api",this.toggle);e("html").on("click.dropdown.data-api",function(){n.parent().removeClass("open")})};n.prototype={constructor:n,toggle:function(t){var n=e(this),s,o;if(n.is(".disabled, :disabled"))return;return s=i(n),o=s.hasClass("open"),r(),o||(s.toggleClass("open"),n.focus()),!1},keydown:function(t){var n,r,s,o,u,a;if(!/(38|40|27)/.test(t.keyCode))return;n=e(this),t.preventDefault(),t.stopPropagation();if(n.is(".disabled, :disabled"))return;o=i(n),u=o.hasClass("open");if(!u||u&&t.keyCode==27)return n.click();r=e("[role=menu] li:not(.divider) a",o);if(!r.length)return;a=r.index(r.filter(":focus")),t.keyCode==38&&a>0&&a--,t.keyCode==40&&a<r.length-1&&a++,~a||(a=0),r.eq(a).focus()}},e.fn.dropdown=function(t){return this.each(function(){var r=e(this),i=r.data("dropdown");i||r.data("dropdown",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.dropdown.Constructor=n,e(function(){e("html").on("click.dropdown.data-api touchstart.dropdown.data-api",r),e("body").on("click.dropdown touchstart.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.dropdown.data-api touchstart.dropdown.data-api",t,n.prototype.toggle).on("keydown.dropdown.data-api touchstart.dropdown.data-api",t+", [role=menu]",n.prototype.keydown)})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=n,this.$element=e(t).delegate('[data-dismiss="modal"]',"click.dismiss.modal",e.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};t.prototype={constructor:t,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var t=this,n=e.Event("show");this.$element.trigger(n);if(this.isShown||n.isDefaultPrevented())return;e("body").addClass("modal-open"),this.isShown=!0,this.escape(),this.backdrop(function(){var n=e.support.transition&&t.$element.hasClass("fade");t.$element.parent().length||t.$element.appendTo(document.body),t.$element.show(),n&&t.$element[0].offsetWidth,t.$element.addClass("in").attr("aria-hidden",!1).focus(),t.enforceFocus(),n?t.$element.one(e.support.transition.end,function(){t.$element.trigger("shown")}):t.$element.trigger("shown")})},hide:function(t){t&&t.preventDefault();var n=this;t=e.Event("hide"),this.$element.trigger(t);if(!this.isShown||t.isDefaultPrevented())return;this.isShown=!1,e("body").removeClass("modal-open"),this.escape(),e(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),e.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal()},enforceFocus:function(){var t=this;e(document).on("focusin.modal",function(e){t.$element[0]!==e.target&&!t.$element.has(e.target).length&&t.$element.focus()})},escape:function(){var e=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(t){t.which==27&&e.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var t=this,n=setTimeout(function(){t.$element.off(e.support.transition.end),t.hideModal()},500);this.$element.one(e.support.transition.end,function(){clearTimeout(n),t.hideModal()})},hideModal:function(e){this.$element.hide().trigger("hidden"),this.backdrop()},removeBackdrop:function(){this.$backdrop.remove(),this.$backdrop=null},backdrop:function(t){var n=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&r;this.$backdrop=e('<div class="modal-backdrop '+r+'" />').appendTo(document.body),this.options.backdrop!="static"&&this.$backdrop.click(e.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),i?this.$backdrop.one(e.support.transition.end,t):t()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(e.support.transition.end,e.proxy(this.removeBackdrop,this)):this.removeBackdrop()):t&&t()}},e.fn.modal=function(n){return this.each(function(){var r=e(this),i=r.data("modal"),s=e.extend({},e.fn.modal.defaults,r.data(),typeof n=="object"&&n);i||r.data("modal",i=new t(this,s)),typeof n=="string"?i[n]():s.show&&i.show()})},e.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},e.fn.modal.Constructor=t,e(function(){e("body").on("click.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this),r=n.attr("href"),i=e(n.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=i.data("modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},i.data(),n.data());t.preventDefault(),i.modal(s).one("hide",function(){n.focus()})})})}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("tooltip",e,t)};t.prototype={constructor:t,init:function(t,n,r){var i,s;this.type=t,this.$element=e(n),this.options=this.getOptions(r),this.enabled=!0,this.options.trigger=="click"?this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this)):this.options.trigger!="manual"&&(i=this.options.trigger=="hover"?"mouseenter":"focus",s=this.options.trigger=="hover"?"mouseleave":"blur",this.$element.on(i+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.leave,this))),this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(t){return t=e.extend({},e.fn[this.type].defaults,t,this.$element.data()),t.delay&&typeof t.delay=="number"&&(t.delay={show:t.delay,hide:t.delay}),t},enter:function(t){var n=e(t.currentTarget)[this.type](this._options).data(this.type);if(!n.options.delay||!n.options.delay.show)return n.show();clearTimeout(this.timeout),n.hoverState="in",this.timeout=setTimeout(function(){n.hoverState=="in"&&n.show()},n.options.delay.show)},leave:function(t){var n=e(t.currentTarget)[this.type](this._options).data(this.type);this.timeout&&clearTimeout(this.timeout);if(!n.options.delay||!n.options.delay.hide)return n.hide();n.hoverState="out",this.timeout=setTimeout(function(){n.hoverState=="out"&&n.hide()},n.options.delay.hide)},show:function(){var e,t,n,r,i,s,o;if(this.hasContent()&&this.enabled){e=this.tip(),this.setContent(),this.options.animation&&e.addClass("fade"),s=typeof this.options.placement=="function"?this.options.placement.call(this,e[0],this.$element[0]):this.options.placement,t=/in/.test(s),e.remove().css({top:0,left:0,display:"block"}).appendTo(t?this.$element:document.body),n=this.getPosition(t),r=e[0].offsetWidth,i=e[0].offsetHeight;switch(t?s.split(" ")[1]:s){case"bottom":o={top:n.top+n.height,left:n.left+n.width/2-r/2};break;case"top":o={top:n.top-i,left:n.left+n.width/2-r/2};break;case"left":o={top:n.top+n.height/2-i/2,left:n.left-r};break;case"right":o={top:n.top+n.height/2-i/2,left:n.left+n.width}}e.css(o).addClass(s).addClass("in")}},setContent:function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},hide:function(){function r(){var t=setTimeout(function(){n.off(e.support.transition.end).remove()},500);n.one(e.support.transition.end,function(){clearTimeout(t),n.remove()})}var t=this,n=this.tip();return n.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?r():n.remove(),this},fixTitle:function(){var e=this.$element;(e.attr("title")||typeof e.attr("data-original-title")!="string")&&e.attr("data-original-title",e.attr("title")||"").removeAttr("title")},hasContent:function(){return this.getTitle()},getPosition:function(t){return e.extend({},t?{top:0,left:0}:this.$element.offset(),{width:this.$element[0].offsetWidth,height:this.$element[0].offsetHeight})},getTitle:function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title),e},tip:function(){return this.$tip=this.$tip||e(this.options.template)},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(){this[this.tip().hasClass("in")?"hide":"show"]()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}},e.fn.tooltip=function(n){return this.each(function(){var r=e(this),i=r.data("tooltip"),s=typeof n=="object"&&n;i||r.data("tooltip",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.tooltip.Constructor=t,e.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover",title:"",delay:0,html:!0}}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype,{constructor:t,setContent:function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content > *")[this.options.html?"html":"text"](n),e.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var e,t=this.$element,n=this.options;return e=t.attr("data-content")||(typeof n.content=="function"?n.content.call(t[0]):n.content),e},tip:function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}}),e.fn.popover=function(n){return this.each(function(){var r=e(this),i=r.data("popover"),s=typeof n=="object"&&n;i||r.data("popover",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.popover.Constructor=t,e.fn.popover.defaults=e.extend({},e.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'})}(window.jQuery),!function(e){"use strict";function t(t,n){var r=e.proxy(this.process,this),i=e(t).is("body")?e(window):e(t),s;this.options=e.extend({},e.fn.scrollspy.defaults,n),this.$scrollElement=i.on("scroll.scroll-spy.data-api",r),this.selector=(this.options.target||(s=e(t).attr("href"))&&s.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=e("body"),this.refresh(),this.process()}t.prototype={constructor:t,refresh:function(){var t=this,n;this.offsets=e([]),this.targets=e([]),n=this.$body.find(this.selector).map(function(){var t=e(this),n=t.data("target")||t.attr("href"),r=/^#\w/.test(n)&&e(n);return r&&r.length&&[[r.position().top,n]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},process:function(){var e=this.$scrollElement.scrollTop()+this.options.offset,t=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,n=t-this.$scrollElement.height(),r=this.offsets,i=this.targets,s=this.activeTarget,o;if(e>=n)return s!=(o=i.last()[0])&&this.activate(o);for(o=r.length;o--;)s!=i[o]&&e>=r[o]&&(!r[o+1]||e<=r[o+1])&&this.activate(i[o])},activate:function(t){var n,r;this.activeTarget=t,e(this.selector).parent(".active").removeClass("active"),r=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=e(r).parent("li").addClass("active"),n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate")}},e.fn.scrollspy=function(n){return this.each(function(){var r=e(this),i=r.data("scrollspy"),s=typeof n=="object"&&n;i||r.data("scrollspy",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.scrollspy.Constructor=t,e.fn.scrollspy.defaults={offset:10},e(window).on("load",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);t.scrollspy(t.data())})})}(window.jQuery),!function(e){"use strict";var t=function(t){this.element=e(t)};t.prototype={constructor:t,show:function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),r=t.attr("data-target"),i,s,o;r||(r=t.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));if(t.parent("li").hasClass("active"))return;i=n.find(".active a").last()[0],o=e.Event("show",{relatedTarget:i}),t.trigger(o);if(o.isDefaultPrevented())return;s=e(r),this.activate(t.parent("li"),n),this.activate(s,s.parent(),function(){t.trigger({type:"shown",relatedTarget:i})})},activate:function(t,n,r){function o(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),s?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),r&&r()}var i=n.find("> .active"),s=r&&e.support.transition&&i.hasClass("fade");s?i.one(e.support.transition.end,o):o(),i.removeClass("in")}},e.fn.tab=function(n){return this.each(function(){var r=e(this),i=r.data("tab");i||r.data("tab",i=new t(this)),typeof n=="string"&&i[n]()})},e.fn.tab.Constructor=t,e(function(){e("body").on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),e(this).tab("show")})})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.typeahead.defaults,n),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.$menu=e(this.options.menu).appendTo("body"),this.source=this.options.source,this.shown=!1,this.listen()};t.prototype={constructor:t,select:function(){var e=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(e)).change(),this.hide()},updater:function(e){return e},show:function(){var t=e.extend({},this.$element.offset(),{height:this.$element[0].offsetHeight});return this.$menu.css({top:t.top+t.height,left:t.left}),this.$menu.show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(t){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=e.isFunction(this.source)?this.source(this.query,e.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(t){var n=this;return t=e.grep(t,function(e){return n.matcher(e)}),t=this.sorter(t),t.length?this.render(t.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(e){return~e.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(e){var t=[],n=[],r=[],i;while(i=e.shift())i.toLowerCase().indexOf(this.query.toLowerCase())?~i.indexOf(this.query)?n.push(i):r.push(i):t.push(i);return t.concat(n,r)},highlighter:function(e){var t=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return e.replace(new RegExp("("+t+")","ig"),function(e,t){return"<strong>"+t+"</strong>"})},render:function(t){var n=this;return t=e(t).map(function(t,r){return t=e(n.options.item).attr("data-value",r),t.find("a").html(n.highlighter(r)),t[0]}),t.first().addClass("active"),this.$menu.html(t),this},next:function(t){var n=this.$menu.find(".active").removeClass("active"),r=n.next();r.length||(r=e(this.$menu.find("li")[0])),r.addClass("active")},prev:function(e){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("blur",e.proxy(this.blur,this)).on("keypress",e.proxy(this.keypress,this)).on("keyup",e.proxy(this.keyup,this)),(e.browser.chrome||e.browser.webkit||e.browser.msie)&&this.$element.on("keydown",e.proxy(this.keydown,this)),this.$menu.on("click",e.proxy(this.click,this)).on("mouseenter","li",e.proxy(this.mouseenter,this))},move:function(e){if(!this.shown)return;switch(e.keyCode){case 9:case 13:case 27:e.preventDefault();break;case 38:e.preventDefault(),this.prev();break;case 40:e.preventDefault(),this.next()}e.stopPropagation()},keydown:function(t){this.suppressKeyPressRepeat=!~e.inArray(t.keyCode,[40,38,9,13,27]),this.move(t)},keypress:function(e){if(this.suppressKeyPressRepeat)return;this.move(e)},keyup:function(e){switch(e.keyCode){case 40:case 38:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}e.stopPropagation(),e.preventDefault()},blur:function(e){var t=this;setTimeout(function(){t.hide()},150)},click:function(e){e.stopPropagation(),e.preventDefault(),this.select()},mouseenter:function(t){this.$menu.find(".active").removeClass("active"),e(t.currentTarget).addClass("active")}},e.fn.typeahead=function(n){return this.each(function(){var r=e(this),i=r.data("typeahead"),s=typeof n=="object"&&n;i||r.data("typeahead",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},e.fn.typeahead.Constructor=t,e(function(){e("body").on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(t){var n=e(this);if(n.data("typeahead"))return;t.preventDefault(),n.typeahead(n.data())})})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=e.extend({},e.fn.affix.defaults,n),this.$window=e(window).on("scroll.affix.data-api",e.proxy(this.checkPosition,this)),this.$element=e(t),this.checkPosition()};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var t=e(document).height(),n=this.$window.scrollTop(),r=this.$element.offset(),i=this.options.offset,s=i.bottom,o=i.top,u="affix affix-top affix-bottom",a;typeof i!="object"&&(s=o=i),typeof o=="function"&&(o=i.top()),typeof s=="function"&&(s=i.bottom()),a=this.unpin!=null&&n+this.unpin<=r.top?!1:s!=null&&r.top+this.$element.height()>=t-s?"bottom":o!=null&&n<=o?"top":!1;if(this.affixed===a)return;this.affixed=a,this.unpin=a=="bottom"?r.top-n:null,this.$element.removeClass(u).addClass("affix"+(a?"-"+a:""))},e.fn.affix=function(n){return this.each(function(){var r=e(this),i=r.data("affix"),s=typeof n=="object"&&n;i||r.data("affix",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.affix.Constructor=t,e.fn.affix.defaults={offset:0},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this),n=t.data();n.offset=n.offset||{},n.offsetBottom&&(n.offset.bottom=n.offsetBottom),n.offsetTop&&(n.offset.top=n.offsetTop),t.affix(n)})})}(window.jQuery);/* persian-date - v0.1.8 */ ( function () {String.prototype.toPersianDigit = function (a) {
    return this.replace(/\d+/g, function (digit) {
        var enDigitArr = [], peDigitArr = [], i, j;
        for (i = 0; i < digit.length; i += 1) {
            enDigitArr.push(digit.charCodeAt(i));
        }
        for (j = 0; j < enDigitArr.length; j += 1) {
            peDigitArr.push(String.fromCharCode(enDigitArr[j] + ((!!a && a === true) ? 1584 : 1728)));
        }
        return peDigitArr.join('');
    });
};

var toPersianDigit = function (digit) {
    return digit.toString().toPersianDigit();
}, isArray = function (input) {
    return Object.prototype.toString.call(input) === '[object Array]';
}, isString = function (input) {
    return typeof input === "string" ? true : false;
}, isNumber = function (input) {
    return typeof input === "number" ? true : false;
}, isDate = function (input) {
    return input instanceof Date;
}, isUndefined = function (input) {
    if (typeof input === "undefined")
        return true;
    else
        return false;
}, leftZeroFill = function (number, targetLength) {
    var output = number + '';
    while (output.length < targetLength) {
        output = '0' + output;
    }
    return output;
}, absRound = function (number) {
    if (number < 0) {
        return Math.ceil(number);
    } else {
        return Math.floor(number);
    }
}, mod = function (a, b) {
    return a - (b * Math.floor(a / b));
};
var monthRange = {
        1: {
            name: {
                fa: "فروردین"
            },
            abbr: {
                fa: "فرو"
            }
        },
        2: {
            name: {
                fa: "اردیبهشت"
            },
            abbr: {
                fa: "ارد"
            }
        },
        3: {
            name: {
                fa: "خرداد"
            },
            abbr: {
                fa: "خرد"
            }
        },
        4: {
            name: {
                fa: "تیر"
            },
            abbr: {
                fa: "تیر"
            }
        },
        5: {
            name: {
                fa: "مرداد"
            },
            abbr: {
                fa: "مرد"
            }
        },
        6: {
            name: {
                fa: "شهریور"
            },
            abbr: {
                fa: "شهر"
            }
        },
        7: {
            name: {
                fa: "مهر"
            },
            abbr: {
                fa: "مهر"
            }
        },
        8: {
            name: {
                fa: "آبان"
            },
            abbr: {
                fa: "آبا"
            }

        },
        9: {
            name: {
                fa: "آذر"
            },
            abbr: {
                fa: "آذر"
            }
        },
        10: {
            name: {
                fa: "دی"
            },
            abbr: {
                fa: "دی"
            }
        },
        11: {
            name: {
                fa: "بهمن"
            },
            abbr: {
                fa: "بهم"
            }
        },
        12: {
            name: {
                fa: "اسفند"
            },
            abbr: {
                fa: "اسف"
            }
        }
    }, weekRange = {
        1: {
            name: {
                fa: "شنبه"
            },
            abbr: {
                fa: "ش"
            }
        },
        2: {
            name: {
                fa: "یکشنبه"
            },
            abbr: {
                fa: "ی"
            }
        },
        3: {
            name: {
                fa: "دوشنبه"
            },
            abbr: {
                fa: "د"
            }
        },
        4: {
            name: {
                fa: "سه شنبه"
            },
            abbr: {
                fa: "س"
            }
        },
        5: {
            name: {
                fa: "چهار شنبه"
            },
            abbr: {
                fa: "چ"
            }
        },
        6: {
            name: {
                fa: "پنج شنبه"
            },
            abbr: {
                fa: "پ"
            }
        },
        0: {
            name: {
                fa: "جمعه"
            },
            abbr: {
                fa: "ج"
            }
        }
    },
    persianDaysName = ["اورمزد", "بهمن", "اوردیبهشت", "شهریور", "سپندارمذ", "خورداد", "امرداد", "دی به آذز", "آذز", "آبان", "خورشید", "ماه", "تیر", "گوش", "دی به مهر", "مهر", "سروش", "رشن", "فروردین", "بهرام", "رام", "باد", "دی به دین", "دین", "ارد", "اشتاد", "آسمان", "زامیاد", "مانتره سپند", "انارام", "زیادی"];
GREGORIAN_EPOCH = 1721425.5,
    PERSIAN_EPOCH = 1948320.5,
    jwday = function (j) {
        return mod(Math.floor((j + 1.5)), 7);
    },
    //  LEAP_GREGORIAN  --  Is a given year in the Gregorian calendar a leap year ?
    isLeapGregorian = function (year) {
        return ((year % 4) == 0) && (!(((year % 100) === 0) && ((year % 400) != 0)));
    },
    isLeapPersian = function (year) {
        return ((((((year - ((year > 0) ? 474 : 473)) % 2820) + 474) + 38) * 682) % 2816) < 682;
    },
    //  GREGORIAN_TO_JD  --  Determine Julian day number from Gregorian calendar date
    gregorianToJd = function (year, month, day) {
        return (GREGORIAN_EPOCH - 1) + (365 * (year - 1)) + Math.floor((year - 1) / 4) + (-Math.floor((year - 1) / 100)) + Math.floor((year - 1) / 400) + Math.floor((((367 * month) - 362) / 12) + ((month <= 2) ? 0 : (isLeapGregorian(year) ? -1 : -2)
            ) + day);
    },
    //  JD_TO_GREGORIAN  --  Calculate Gregorian calendar date from Julian day
    jdToGregorian = function (jd) {
        var wjd, depoch, quadricent, dqc, cent, dcent, quad, dquad, yindex, dyindex, year, yearday, leapadj;
        wjd = Math.floor(jd - 0.5) + 0.5;
        depoch = wjd - GREGORIAN_EPOCH;
        quadricent = Math.floor(depoch / 146097);
        dqc = mod(depoch, 146097);
        cent = Math.floor(dqc / 36524);
        dcent = mod(dqc, 36524);
        quad = Math.floor(dcent / 1461);
        dquad = mod(dcent, 1461);
        yindex = Math.floor(dquad / 365);
        year = (quadricent * 400) + (cent * 100) + (quad * 4) + yindex;
        if (!((cent == 4) || (yindex == 4))) {
            year++;
        }
        yearday = wjd - gregorianToJd(year, 1, 1);
        leapadj = ((wjd < gregorianToJd(year, 3, 1)) ? 0 : (isLeapGregorian(year) ? 1 : 2)
            );
        month = Math.floor((((yearday + leapadj) * 12) + 373) / 367);
        day = (wjd - gregorianToJd(year, month, 1)) + 1;
        return new Array(year, month, day);
    },
    //  PERSIAN_TO_JD  --  Determine Julian day from Persian date
    persianToJd = function (year, month, day) {
        mod = function (a, b) {
            return a - (b * Math.floor(a / b));
        };

        var epbase, epyear;
        epbase = year - ((year >= 0) ? 474 : 473);
        epyear = 474 + mod(epbase, 2820);
        return day + ((month <= 7) ? ((month - 1) * 31) : (((month - 1) * 30) + 6)
            ) + Math.floor(((epyear * 682) - 110) / 2816) + (epyear - 1) * 365 + Math.floor(epbase / 2820) * 1029983 + (PERSIAN_EPOCH - 1);
    },
    //  JD_TO_PERSIAN  --  Calculate Persian date from Julian day
    jdToPersian = function (jd) {
        var year, month, day, depoch, cycle, cyear, ycycle, aux1, aux2, yday;
        jd = Math.floor(jd) + 0.5;
        depoch = jd - persianToJd(475, 1, 1);
        cycle = Math.floor(depoch / 1029983);
        cyear = mod(depoch, 1029983);
        if (cyear === 1029982) {
            ycycle = 2820;
        } else {
            aux1 = Math.floor(cyear / 366);
            aux2 = mod(cyear, 366);
            ycycle = Math.floor(((2134 * aux1) + (2816 * aux2) + 2815) / 1028522) + aux1 + 1;
        }
        year = ycycle + (2820 * cycle) + 474;
        if (year <= 0) {
            year -= 1;
        }
        yday = (jd - persianToJd(year, 1, 1)) + 1;
        month = (yday <= 186) ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);
        day = (jd - persianToJd(year, month, 1)) + 1;
        return new Array(year, month, day);
    },
    calcPersian = function (year, month, day) {
        var date, j;
        var j = persianToJd(year, month, day);
        var date = jdToGregorian(j);
        return new Array(date[0], date[1] - 1, date[2]);
    },
    //  calcGregorian  --  Perform calculation starting with a Gregorian date
    calcGregorian = function (year, month, day) {
        //  Update Julian day
        var j = gregorianToJd(year, month + 1, day) + (Math.floor(0 + 60 * (0 + 60 * 0) + 0.5) / 86400.0),
        //  Update Persian Calendar
            perscal = jdToPersian(j), weekday = jwday(j);
        return new Array(perscal[0], perscal[1], perscal[2], weekday);
    },
    //Converts a gregorian date to Jalali date for different formats
    toPersianDate = function (gd) {
        var pa = calcGregorian(gd.getFullYear(), gd.getMonth(), gd.getDate());
        var output = {};
        output.monthDayNumber = pa[2] - 1;
        if (pa[3] == 6) {
            output.weekDayNumber = 1;
        } else if (pa[3] == 5) {
            output.weekDayNumber = 0;
        } else if (pa[3] == 4) {
            output.weekDayNumber = 6;
        } else if (pa[3] == 3) {
            output.weekDayNumber = 5;
        } else if (pa[3] == 2) {
            output.weekDayNumber = 4;
        } else if (pa[3] == 1) {
            output.weekDayNumber = 3;
        } else if (pa[3] == 0) {
            output.weekDayNumber = 2;
        }
        output.year = pa[0];
        output.month = pa[1];
        output.day = output.weekDayNumber;
        output.date = pa[2];
        output.hours = gd.getHours();
        output.minutes = ((gd.getMinutes() < 10) ? ('0' + gd.getMinutes()) : (gd.getMinutes()));
        output.seconds = gd.getSeconds();
        output.milliseconds = gd.getMilliseconds();
        output.timeZoneOffset = gd.getTimezoneOffset();
        return output;
    },
    persianArrayToGregorianDate = function (parray) {
        // Howha : javascript Cant Parse this array truly 2011,2,20
        var pd = calcPersian(parray[0] ? parray[0] : 0, parray[1] ? parray[1] : 1, parray[2] ? parray[2] : 1);
        var gDate = new Date(pd[0], pd[1], pd[2]);
        gDate.setYear(pd[0]);
        gDate.setMonth(pd[1]);
        gDate.setDate(pd[2]);
        // TODO:
        gDate.setHours(parray[3] ? parray[3] : 0);
        gDate.setMinutes(parray[4] ? parray[4] : 0);
        gDate.setSeconds(parray[5] ? parray[5] : 0);
        return gDate;
    },
    getPersianArrayFromPDate = function (pDate) {
        return [pDate.year, pDate.month, pDate.date, pDate.hours, pDate.minutes, pDate.seconds, pDate.milliseconds];
    };
Duration = function (duration) {
    var absRound = function (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }, data = this._data = {}, years = duration.years || duration.year || duration.y || 0, months = duration.months || duration.month || duration.M || 0, weeks = duration.weeks || duration.w || duration.week || 0, days = duration.days || duration.d || duration.day || 0, hours = duration.hours || duration.hour || duration.h || 0, minutes = duration.minutes || duration.minute || duration.m || 0, seconds = duration.seconds || duration.second || duration.s || 0, milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;
    // representation for dateAddRemove
    this._milliseconds = milliseconds + seconds * (1e3) + minutes * (6e4) + hours * (36e5);
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = days + weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = months + years * 12;
    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;
    seconds += absRound(milliseconds / 1000);
    data.seconds = seconds % 60;
    minutes += absRound(seconds / 60);
    data.minutes = minutes % 60;
    hours += absRound(minutes / 60);
    data.hours = hours % 24;
    days += absRound(hours / 24);
    days += weeks * 7;
    data.days = days % 30;
    months += absRound(days / 30);
    data.months = months % 12;
    years += absRound(months / 12);
    data.years = years;
    return this;
};

Duration.prototype = {
    weeks: function () {
        return "Must Implement";
    },
    valueOf: function () {
        return this._milliseconds + this._days * (864e5) + this._months * (2592e6);
    },
    humanize: function (withSuffix) {
        return "Must Implement";
    }
};
var PersianDate = function (input) {
    if (!(this instanceof PersianDate))
        return new PersianDate(input)
    // Convert Any thing to Gregorian Date
    if (isUndefined(input)) {
        this.gDate = new Date();
    } else if (isDate(input)) {
        this.gDate = input;
    } else if (isArray(input)) {
        //  Encapsulate Input Array
        var arrayInput = input.slice();
        this.gDate = persianArrayToGregorianDate(arrayInput);
    } else if (isNumber(input)) {
        this.gDate = new Date(input);
    } else if (input instanceof PersianDate) {
        this.gDate = input.gDate;
    }
    // ASP.NET JSON Date
    else if (input.substring(0, 6) === "/Date(") {
        this.gDate = new Date(parseInt(input.substr(6)));
    }
    this.pDate = toPersianDate(this.gDate);
    return this;
};

PersianDate.prototype = {
    duration: function (input, key) {
        var isDuration = this.isDuration(input), isNumber = ( typeof input === 'number'), duration = ( isDuration ? input._data : ( isNumber ? {} : input)), ret;
        if (isNumber) {
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        }
        return new Duration(duration);
    },
    isDuration: function (obj) {
        return obj instanceof Duration;
    },
    humanize: function () {
        return "Must Implement";
    },
    add: function (key, input) {
        var d = this.duration(input, key).valueOf(), newUnixDate = this.gDate.valueOf() + d;
        return new PersianDate(newUnixDate);
    },
    subtract: function (key, input) {
        var d = this.duration(input, key).valueOf(), newUnixDate = this.gDate.valueOf() - d;
        return new PersianDate(newUnixDate);
    },
    formatPersian: "_default",
    formatNumber: function () {
        var output;
        // if default conf dosent set follow golbal config
        if (this.formatPersian === "_default") {
            if (window.formatPersian === false) {
                output = false;
            } else {
                // Default Conf
                output = true;
            }
        } else {
            if (this.formatPersian === true) {
                output = true;
            } else if (this.formatPersian === false) {
                output = false;
            } else {
                $.error("Invalid Config 'formatPersian' !!")
            }
        }
        return output;
    },
    format: function (inputString) {
        var self = this, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DD?D?D?|ddddd|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|X|LT|ll?l?l?|LL?L?L?)/g, info = {
            year: self.year(),
            month: self.month(),
            hour: self.hours(),
            minute: self.minutes(),
            second: self.seconds(),
            date: self.date(),
            timezone: self.zone(),
            unix: self.unix()
        };

        function replaceFunction(input) {
            formatToPersian = self.formatNumber();
            switch (input) {
                // AM/PM
                case("a"):
                {
                    if (formatToPersian)
                        return ((info.hour >= 12) ? 'ب ظ' : 'ق ظ');
                    else
                        return ((info.hour >= 12) ? 'PM' : 'AM');
                }
                // Hours (Int)
                case("H"):
                {
                    if (formatToPersian)
                        return toPersianDigit(info.hour);
                    else
                        return info.hour;
                }
                case("HH"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.hour, 2));
                    else
                        return leftZeroFill(info.hour, 2);
                }
                case("h"):
                {
                    var h = info.hour % 12;
                    if (formatToPersian)
                        return toPersianDigit(h);
                    else
                        return h;
                }
                case("hh"):
                {
                    var h = info.hour % 12;
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(h, 2));
                    else
                        return leftZeroFill(h, 2);
                }
                // Minutes
                case("m"):
                {
                    if (formatToPersian)
                        return toPersianDigit(info.minute);
                    else
                        return info.minute;
                }
                // Two Digit Minutes
                case("mm"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.minute, 2));
                    else
                        return leftZeroFill(info.minute, 2);
                }
                // Second
                case("s"):
                {
                    if (formatToPersian)
                        return toPersianDigit(info.second);
                    else
                        return info.second;
                }
                case("ss"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.second, 2));
                    else
                        return leftZeroFill(info.second, 2);
                }
                // Day (Int)
                case("D"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.date));
                    else
                        return leftZeroFill(info.date);
                }
                // Return Two Digit
                case("DD"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.date, 2));
                    else
                        return leftZeroFill(info.date, 2);
                }
                // Return day Of Year
                case("DDD"):
                {
                    var t = self.startOf("year")
                    if (formatToPersian)
                        return toPersianDigit(self.diff(t, "days"));
                    else
                        return self.diff(t, "days");
                }
                // Return Week Day Full Name
                case("DDDD"):
                {
                    var t = self.startOf("year")
                    if (formatToPersian)
                        return leftZeroFill(self.diff(t, "days"), 3);
                    else
                        return toPersianDigit(leftZeroFill(self.diff(t, "days"), 3));
                }
                // Return day Of week
                case("d"):
                {
                    if (formatToPersian)
                        return toPersianDigit(self.pDate.weekDayNumber);
                    else
                        return self.pDate.weekDayNumber;
                }
                // Return week day name abbr
                case("ddd"):
                {
                    return weekRange[self.pDate.weekDayNumber].abbr.fa;
                }
                case("dddd"):
                {
                    return weekRange[self.pDate.weekDayNumber].name.fa;
                }
                // Return Persian Day Name
                case("ddddd"):
                {
                    return persianDaysName[self.pDate.monthDayNumber]
                }
                // Return Persian Day Name
                case("w"):
                {
                    var t = self.startOf("year")
                    return parseInt(self.diff(t, "days") / 7) + 1;
                }
                // Return Persian Day Name
                case("ww"):
                {
                    var t = self.startOf("year")
                    return leftZeroFill(parseInt(self.diff(t, "days") / 7) + 1, 2);
                }
                // Month  (Int)
                case("M"):
                {
                    if (formatToPersian)
                        return toPersianDigit(info.month);
                    else
                        return info.month;
                }
                // Two Digit Month (Str)
                case("MM"):
                {
                    if (formatToPersian)
                        return toPersianDigit(leftZeroFill(info.month, 2));
                    else
                        return leftZeroFill(info.month, 2);
                }
                // Abbr String of Month (Str)
                case("MMM"):
                {
                    return monthRange[info.month].abbr.fa;
                }
                // Full String name of Month (Str)
                case("MMMM"):
                {
                    return monthRange[info.month].name.fa;
                }
                // Year
                // Two Digit Year (Str)
                case("YY"):
                {
                    var yearDigitArray = info.year.toString().split("");
                    if (formatToPersian)
                        return toPersianDigit(yearDigitArray[2] + yearDigitArray[3]);
                    else
                        return yearDigitArray[2] + yearDigitArray[3];
                }
                // Full Year (Int)
                case("YYYY"):
                {
                    if (formatToPersian)
                        return toPersianDigit(info.year);
                    else
                        return info.year;
                }
                case("Z"):
                {
                    var flag = "+";
                    var hours = Math.round(info.timezone / 60);
                    var minutes = info.timezone % 60;
                    if (minutes < 0) {
                        minutes *= -1;
                    }
                    if (hours < 0) {
                        flag = "-";
                        hours *= -1;
                    }

                    var z = flag + leftZeroFill(hours, 2) + ":" + leftZeroFill(minutes, 2);
                    if (formatToPersian)
                        return toPersianDigit(z)
                    else
                        return z;
                }
                case("ZZ"):
                {
                    var flag = "+";
                    var hours = Math.round(info.timezone / 60);
                    var minutes = info.timezone % 60;
                    if (minutes < 0) {
                        minutes *= -1;
                    }
                    if (hours < 0) {
                        flag = "-";
                        hours *= -1;
                    }

                    var z = flag + leftZeroFill(hours, 2) + "" + leftZeroFill(minutes, 2);
                    if (formatToPersian)
                        return toPersianDigit(z)
                    else
                        return z;
                }
                case("X"):
                {
                    return self.unix();
                }
                // 8:30 PM
                case("LT"):
                {
                    return self.format("h:m a");
                }
                // 09/04/1986
                case("L"):
                {
                    return self.format("YYYY/MM/DD");
                }
                // 9/4/1986
                case("l"):
                {
                    return self.format("YYYY/M/D");
                }
                // September 4th 1986
                case("LL"):
                {
                    return self.format("MMMM DD YYYY");
                }
                // Sep 4 1986
                case("ll"):
                {
                    return self.format("MMM DD YYYY");
                }
                //September 4th 1986 8:30 PM
                case("LLL"):
                {
                    return self.format("MMMM YYYY DD   h:m  a");
                }
                // Sep 4 1986 8:30 PM
                case("lll"):
                {
                    return self.format("MMM YYYY DD   h:m  a");
                }
                //Thursday, September 4th 1986 8:30 PM
                case("LLLL"):
                {
                    return self.format("dddd D MMMM YYYY  h:m  a");
                }
                // Thu, Sep 4 1986 8:30 PM
                case("llll"):
                {
                    return self.format("ddd D MMM YYYY  h:m  a");
                }

                default:
                    return info._d;
            }
        }

        if (inputString) {
            return inputString.replace(formattingTokens, replaceFunction);
        } else {
            var inputString = "YYYY-MM-DD HH:mm:ss a"
            return inputString.replace(formattingTokens, replaceFunction);
        }
    },
    // Humanize
    from: function () {
        return "Must Implement";
    },
    fromNow: function () {
        return "Must Implement";
    },
    humanizeDuration: function () {
        return "Must Implement";
    },
    _d: function () {
        return this.gDate._d;
    },
    diff: function (input, val, asFloat) {
        var self = new PersianDate(this), inputMoment = input,
        //this._isUTC ? moment(input).utc() : moment(input).local();
            zoneDiff = 0,
        //(this.zone() - inputMoment.zone()) * 6e4;
            diff = self.gDate - inputMoment.gDate - zoneDiff, year = self.year() - inputMoment.year(), month = self.month() - inputMoment.month(), date = (self.date() - inputMoment.date()) * -1, output;
        if (val === 'months' || val === 'month') {
            output = year * 12 + month + date / 30;
        } else if (val === 'years' || val === 'year') {
            output = year + (month + date / 30) / 12;
        } else {
            output = val === 'seconds' || val === 'second' ? diff / 1e3 : // 1000
                    val === 'minutes' || val === 'minute' ? diff / 6e4 : // 1000 * 60
                    val === 'hours' || val === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    val === 'days' || val === 'day' ? diff / 864e5 : // 1000 * 60 * 60 * 24
                    val === 'weeks' || val === 'week' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7
                diff;
        }
        if (output < 0)
            output * -1;
        return asFloat ? output : Math.round(output);
    },
    startOf: function (key) {
        // Simplify this
        switch (key) {
            case "years":
            case "year" :
                return new PersianDate([this.year(), 1, 1]);
            case "months":
            case "month":
                return new PersianDate([this.year(), this.month(), 1]);
            case "days" :
            case "day" :
                return new PersianDate([this.year(), this.month(), this.date(), 0, 0, 0]);
            case "hours" :
            case "hour" :
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), 0, 0]);
            case "minutes":
            case "minute":
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 0]);
            case "seconds":
            case "second":
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);
            case "weeks":
            case "week":
                var weekDayNumber = this.pDate.weekDayNumber;
                if (weekDayNumber === 0) {
                    return new PersianDate([this.year(), this.month(), this.date()]);
                } else {
                    return new PersianDate([this.year(), this.month(), this.date()]).subtract("days", weekDayNumber);
                }
            default:
                return this;
        }
    },
    endOf: function (key) {
        // Simplify this
        switch (key) {
            case "years":
            case "year":
                var days = this.isLeapYear() ? 30 : 29;
                return new PersianDate([this.year(), 12, days, 23, 59, 59]);
            case "months":
            case "month":
                var monthDays = this.daysInMonth(this.year(), this.month());
                return new PersianDate([this.year(), this.month(), monthDays, 23, 59, 59]);
            case "days" :
            case "day" :
                return new PersianDate([this.year(), this.month(), this.date(), 23, 59, 59]);
            case "hours" :
            case "hour" :
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), 59, 59]);
            case "minutes":
            case "minute":
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 59]);
            case "seconds":
            case "second":
                return new PersianDate([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);
            case "weeks":
            case "week":
                var weekDayNumber = this.pDate.weekDayNumber;
                if (weekDayNumber === 6) {
                    weekDayNumber = 7;
                } else {
                    weekDayNumber = 6 - weekDayNumber;
                }
                return new PersianDate([this.year(), this.month(), this.date()]).add("days", weekDayNumber);
            default:
                return this;
        }
    },
    sod: function () {
        return this.startOf("day");
    },
    eod: function () {
        return this.endOf("day");
    },
    // Get the timezone offset in minutes.
    zone: function () {
        return this.pDate.timeZoneOffset;
    },
    _utcMode: false,
    local: function () {
        if (!this._utcMode) {
            return this;
        } else {
            var offsetMils = this.pDate.timeZoneOffset * 60 * 1000;
            if (this.pDate.timeZoneOffset < 0) {
                var utcStamp = this.valueOf() - offsetMils;
            } else {
                var utcStamp = this.valueOf() + offsetMils;
            }
            this.gDate = new Date(utcStamp);
            this._updatePDate();
            this._utcMode = false;
            return this;
        }
    },
    // current date/time in UTC mode
    utc: function (input) {
        if (input) {
            return new persianDate(input).utc();
        }
        if (this._utcMode) {
            return this;
        } else {
            var offsetMils = this.pDate.timeZoneOffset * 60 * 1000;
            if (this.pDate.timeZoneOffset < 0) {
                var utcStamp = this.valueOf() + offsetMils;
            } else {
                var utcStamp = this.valueOf() - offsetMils;
            }
            this.gDate = new Date(utcStamp);
            this._updatePDate();
            this._utcMode = true;
            return this;
        }
    },
    isUtc: function () {
        return this._utcMode;
    },
    // version 0.0.1
    isDST: function () {
        // Just Iran Day light saving time
        var output = false;
        if (this.month() >= 1 && this.month() <= 6) {
            output = true;
            switch (this.month()) {
                case(1):
                    if (this.date() < 2) {
                        output = false
                    }
                    ;
                    break;
                case(6):
                    if (this.date() > 30) {
                        output = false
                    }
                    ;
                    break;
            }
        }
        ;
        return output;
    },
    isLeapYear: function () {
        return isLeapPersian(this.year());
    },
    daysInMonth: function (yearInput, monthInput) {
        var year = yearInput ? yearInput : this.year();
        var month = monthInput ? monthInput : this.month();
        if (month < 1 || month > 12)
            return 0;
        if (month < 7)
            return 31;
        if (month < 12)
            return 30;
        if (isLeapPersian(year))
            return 30;
        return 29;
    },
    // return Native Javascript Date
    toDate: function () {
        return this.gDate;
    },
    // return Array Of Persian Date
    toArray: function () {
        return [this.year(), this.month(), this.day(), this.hour(), this.minute(), this.second(), this.millisecond()];
    },
    // Return Milliseconds since the Unix Epoch (1318874398806)
    _valueOf: function () {
        return this.gDate.valueOf();
    },
    // Return Unix Timestamp (1318874398)
    unix: function (timestamp) {
        if (timestamp) {
            return new persianDate(timestamp * 1000);
        } else {
            var str = this.gDate.valueOf().toString();
            output = str.substring(0, str.length - 3);
        }
        return parseInt(output);
    },
    isPersianDate: function (obj) {
        return obj instanceof PersianDate;
    },
    // -------------------------------------- Getter Setter
    millisecond: function (input) {
        return this.milliseconds(input)
    },
    milliseconds: function (input) {
        if (input) {
            this.gDate.setMilliseconds(input);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.milliseconds;
        }
    },
    second: function (input) {
        return this.seconds(input);

    },
    seconds: function (input) {
        if (input | input === 0) {
            this.gDate.setSeconds(input);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.seconds;
        }
    },
    minute: function (input) {
        return this.minutes(input);
    },
    minutes: function (input) {
        if (input || input === 0) {
            this.gDate.setMinutes(input);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.minutes;
        }
    },
    hour: function (input) {
        return this.hours(input)
    },
    hours: function (input) {
        if (input | input === 0) {
            this.gDate.setHours(input);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.hours;
        }
    },
    // Day of Months
    dates: function (input) {
        return this.date(input)
    },
    date: function (input) {
        if (input | input == 0) {
            var pDateArray = getPersianArrayFromPDate(this.pDate);
            pDateArray[2] = input;
            this.gDate = persianArrayToGregorianDate(pDateArray);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.date;
        }
    },
    // DAy of week
    days: function () {
        return this.day();
    },
    day: function () {
        return this.pDate.day;
    },
    month: function (input) {
        if (input | input === 0) {
            var pDateArray = getPersianArrayFromPDate(this.pDate);
            pDateArray[1] = input;
            this.gDate = persianArrayToGregorianDate(pDateArray);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.month;
        }
    },
    years: function (input) {
        return this.year(input);
    },
    year: function (input) {
        if (input | input === 0) {
            var pDateArray = getPersianArrayFromPDate(this.pDate);
            pDateArray[0] = input;
            this.gDate = persianArrayToGregorianDate(pDateArray);
            this._updatePDate();
            return this;
        } else {
            return this.pDate.year;
        }
    },
    getFirstWeekDayOfMonth: function (year, month) {
        var dateArray = calcPersian(year, month, 1), pdate = calcGregorian(dateArray[0], dateArray[1], dateArray[2]);
        if (pdate[3] + 2 === 8) {
            return 1;
        } else if (pdate[3] + 2 === 7) {
            return 7;
        } else {
            return pdate[3] + 2;
        }
    },
    clone: function () {
        var self = this;
        return new PersianDate(self.gDate);
    },
    version: "0.1.7",
    _updatePDate: function () {
        this.pDate = toPersianDate(this.gDate);
    },
    valueOf: function () {
        return this._valueOf();
    }
};


persianDate = PersianDate;
pDate = PersianDate;
persianDate.unix = persianDate.prototype.unix;
persianDate.utc = persianDate.prototype.utc;}());/*
  persian-datepicker - v0.4.5 
  Author: reza babakhani 
 http://babakhani.github.io/PersianWebToolkit/datepicker 
 */
(function(){(function(e){e.fn.persianDatepicker=e.fn.pDatepicker=function(t){var i=Array.prototype.slice.call(arguments),n=this;return this||e.error("Invalid selector"),e(this).each(function(){var a=[],s=i.concat(a),r=e(this).data("datepicker");if(r&&"string"==typeof s[0]){var o=s[0];s.splice(0,1),n=r[o](s[0])}else this.pDatePicker=new f(this,t)}),n}})(jQuery);var e={persianDigit:!0,viewMode:!1,position:"auto",autoClose:!1,format:!1,observer:!1,inputDelay:800,formatter:function(e){var t=this,i=new persianDate(e);return i.formatPersian=!1,i.format(t.format)},altField:!1,altFormat:"unix",altFieldFormatter:function(e){var t=this,i=t.altFormat.toLowerCase();return"gregorian"===i|"g"===i?new Date(e):"unix"===i|"u"===i?e:new persianDate(e).format(t.altFormat)},show:function(){return this.view.fixPosition(this),this.element.main.show(),this.onShow(this),this._viewed=!0,this},hide:function(){return this._viewed&&(this.element.main.hide(),this.onHide(this),this._viewed=!1),this},destroy:function(){this.inputElem.removeClass(self.cssClass),this.elmenet.main.remove()},onShow:function(){},onHide:function(){},onSelect:function(){return this},navigator:{enabled:!0,text:{btnNextText:"<",btnPrevText:">"},onNext:function(){},onPrev:function(){},onSwitch:function(){}},toolbox:{enabled:!0,text:{btnToday:"امروز"},onToday:function(){}},timePicker:{enabled:!1,showSeconds:!0,showMeridian:!0,secondStep:1,minuteStep:1,hourStep:1,scrollEnabled:!0,changeOnScroll:!0},dayPicker:{enabled:!0,scrollEnabled:!0,titleFormat:"YYYY MMMM",titleFormatter:function(e,t){0==this.datepicker.persianDigit&&(window.formatPersian=!1);var i=new persianDate([e,t]).format(this.titleFormat);return window.formatPersian=!0,i},onSelect:function(){}},monthPicker:{enabled:!0,scrollEnabled:!0,titleFormat:"YYYY",titleFormatter:function(e){0==this.datepicker.persianDigit&&(window.formatPersian=!1);var t=new persianDate(e).format(this.titleFormat);return window.formatPersian=!0,t},onSelect:function(){}},yearPicker:{enabled:!0,scrollEnabled:!0,titleFormat:"YYYY",titleFormatter:function(e){var t=12*parseInt(e/12);return t+"-"+(t+11)},onSelect:function(){}},onlyTimePicker:!1,justSelectOnDate:!0,minDate:!1,maxDate:!1,checkDate:function(){return!0},checkMonth:function(){return!0},checkYear:function(){return!0}},t={monthRange:{1:{name:{fa:"فروردین"},abbr:{fa:"فرو"}},2:{name:{fa:"اردیبهشت"},abbr:{fa:"ارد"}},3:{name:{fa:"خرداد"},abbr:{fa:"خرد"}},4:{name:{fa:"تیر"},abbr:{fa:"تیر"}},5:{name:{fa:"مرداد"},abbr:{fa:"مرد"}},6:{name:{fa:"شهریور"},abbr:{fa:"شهر"}},7:{name:{fa:"مهر"},abbr:{fa:"مهر"}},8:{name:{fa:"آبان"},abbr:{fa:"آبا"}},9:{name:{fa:"آذر"},abbr:{fa:"آذر"}},10:{name:{fa:"دی"},abbr:{fa:"دی"}},11:{name:{fa:"بهمن"},abbr:{fa:"بهم"}},12:{name:{fa:"اسفند"},abbr:{fa:"اسف"}}},weekRange:{0:{name:{fa:"شنبه"},abbr:{fa:"ش"}},1:{name:{fa:"یکشنبه"},abbr:{fa:"ی"}},2:{name:{fa:"دوشنبه"},abbr:{fa:"د"}},3:{name:{fa:"سه شنبه"},abbr:{fa:"س"}},4:{name:{fa:"چهار شنبه"},abbr:{fa:"چ"}},5:{name:{fa:"پنج شنبه"},abbr:{fa:"پ"}},6:{name:{fa:"جمعه"},abbr:{fa:"ج"}}},persianDaysName:["اورمزد","بهمن","اوردیبهشت","شهریور","سپندارمذ","خورداد","امرداد","دی به آذز","آذز","آبان","خورشید","ماه","تیر","گوش","دی به مهر","مهر","سروش","رشن","فروردین","بهرام","رام","باد","دی به دین","دین","ارد","اشتاد","آسمان","زامیاد","مانتره سپند","انارام","زیادی"]},i={datepciker:"<div class='{{css.datePickerPlotArea}}' ><div class='{{css.navigator}}' ></div> <div class='{{css.dayView}}' ></div><div class='{{css.monthView}}' ></div><div class='{{css.yearView}}' ></div><div class='{{css.timeView}}' ></div><div class='{{css.toolbox}}' ></div></div>",navigator:"<div class='{{css.datpickerHeader}}' ><div class='{{css.btnNext}}' >{{btnNextText}}</div><div class='{{css.btnSwitch}}' >{{btnSwitchText}}</div><div class='{{css.btnPrev}}' >{{btnPrevText}}</div></div>",timepicker:"<div class='hour time-segment' data-time-key='hour' ><div class='up-btn' >&#9650;</div><input type='text' placeholder='hour' class='hour-input' /><div class='down-btn' >&#9660;</div></div><div class='divider' >:</div><div class='minute time-segment' data-time-key='minute' ><div class='up-btn' >&#9650;</div><input type='text' placeholder='minute' class='minute-input' /><div class='down-btn' >&#9660;</div></div><div class='divider second-divider' >:</div><div class='second time-segment' data-time-key='second' ><div class='up-btn' >&#9650;</div><input type='text' placeholder='second' class='second-input' /><div class='down-btn' >&#9660;</div></div><div class='divider meridian-divider' ></div><div class='divider meridian-divider' ></div><div class='meridian time-segment' data-time-key='meridian' ><div class='up-btn' >&#9650;</div><input type='text' placeholder='meridian&' class='meridian-input' /><div class='down-btn' >&#9660;</div></div>",monthGrid:"<div class='{{css.main}}' ><div class='{{css.header}}' ><div class='{{css.headerTitle}}' ></div><div class='{{css.headerRow}}' ></div></div><table cellspacing='0' class='{{css.daysTable}}'  ><tbody><tr><td /><td/><td/><td/><td/><td/><td/></tr><tr><td/><td/><td/><td/><td/><td/><td/></tr><tr><td/><td/><td/><td/><td/><td/><td/></tr><tr><td/><td/><td/><td/><td/><td/><td/></tr><tr><td/><td/><td/><td/><td/><td/><td/></tr><tr><td/><td/><td/><td/><td/><td/><td/></tr></tbody></table></div>"},n={init:function(){this.isInstance=!0,this.raiseEvent("init")},publishInDic:function(e,t){return $.each(e,function(e,i){i[t]()}),e},callOfDict:function(){},isSameDay:function(e,t){var i=new pDate(e),n=new pDate(t);return i&&n&&i.year()===n.year()&&i.month()===n.month()&&i.date()===n.date()},isValidGreguranDate:function(e){return e&&"Invalid Date"!=new Date(e)&&"undefined"!=new Date(e)},validatePersianDateString:function(e){var t=new Date(e),i=e.split("/");if(3===i.length)var n=4>=(""+i[0]).length&&(""+i[0]).length>=1,a=2>=(""+i[1]).length&&(""+i[1]).length>=1,s=2>=(""+i[2]).length&&(""+i[2]).length>=1;return $.each(i,function(e,t){i[e]=parseInt(t)}),n&&a&&s&&"Invalid Date"!==t?i:null},fullHeight:function(e){return $(e).height()+parseInt($(e).css("padding-top"))+parseInt($(e).css("padding-bottom"))+parseInt($(e).css("borderTopWidth"))+parseInt($(e).css("borderBottomWidth"))},attachEvent:function(e,t){this.events[e]||(this.events[e]=[]);var i;for(i in this.events[e])""+this.events[e][i]==""+t&&$.error("The function {0} was already added to event's chain.".format(t.toString));return this.events[e].push(t),this},dettachEvent:function(e,t){this.events[e]||$.error("The event's chain is empty.");var i;for(i in this.events[e])""+this.events[e][i]==""+t&&delete this.events[e][i];return this},clearEvent:function(e){return this.events[e]=null,this},raiseEvent:function(e,t){if(e&&this.events){t||(t=[]);var i=this.events[e];if(i){if("function"==typeof i)i.apply(this,t);else{var n;for(n in i)i[n].apply(this,t)}return this}}}},a={defaultView:"default",events:{init:function(){this.render()},render:null},views:{"default":{render:function(){}}},element:{main:null},createElementByClass:function(e){return this.element.find("."+e)},render:function(e){return e||(e="default"),this.raiseEvent("render"),this.view=this.views[e],this.view.render(this)}},s={compatConfig:function(){return this.viewMode===!1&&(this.yearPicker.enabled&&(this.viewMode="year"),this.monthPicker.enabled&&(this.viewMode="month"),this.dayPicker.enabled?this.viewMode="day":this.justSelectOnDate=!1),this.minDate|this.maxDate?(this.state.setFilterDate("unix",this.minDate,this.maxDate),this.state._filetredDate=!0):this.state._filetredDate=!1,this}};Object.keys=Object.keys||function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),i=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=i.length;return function(a){if("object"!=typeof a&&"function"!=typeof a||null===a)throw new TypeError("Object.keys called on a non-object");var s=[];for(var r in a)e.call(a,r)&&s.push(r);if(t)for(var o=0;n>o;o++)e.call(a,i[o])&&s.push(i[o]);return s}}(),$.event.special.textchange={setup:function(){$.event.special.textchange.saveLastValue(this),$(this).bind("keyup.textchange",$.event.special.textchange.handler),$(this).bind("cut.textchange paste.textchange input.textchange",$.event.special.textchange.delayedHandler)},teardown:function(){$(this).unbind(".textchange")},handler:function(){$.event.special.textchange.triggerIfChanged($(this))},delayedHandler:function(){var e=$(this);setTimeout(function(){$.event.special.textchange.triggerIfChanged(e)},25)},triggerIfChanged:function(e){var t="true"===e[0].contentEditable?e.html():e.val();t!==e.data("lastValue")&&e.trigger("textchange",e.data("lastValue"))},saveLastValue:function(e){$(e).data("lastValue","true"===e.contentEditable?$(e).html():$(e).val())}},$.event.special.hastext={setup:function(){$(this).bind("textchange",$.event.special.hastext.handler)},teardown:function(){$(this).unbind("textchange",$.event.special.hastext.handler)},handler:function(e,t){""===t&&t!==$(this).val()&&$(this).trigger("hastext")}},$.event.special.notext={setup:function(){$(this).bind("textchange",$.event.special.notext.handler)},teardown:function(){$(this).unbind("textchange",$.event.special.notext.handler)},handler:function(e,t){""===$(this).val()&&$(this).val()!==t&&$(this).trigger("notext")}};var r=$.fn.val;$.fn.val=function(){var e=r.apply(this,arguments);return arguments.length&&this.each(function(){$.event.special.textchange.triggerIfChanged($(this))}),e},$.tmplMustache=function(e,t){return String.prototype.format=function(e){function t(t){var i=t.slice(2,-2).split("."),n=i[0],a=i[1];return e[n]instanceof Object?e[n][a]:e[n]}return this.replace(/{{\s*[\w\.]+\s*}}/g,t)},$(e.format(t))},String.prototype.toPersianDigit=function(e){return this.replace(/\d+/g,function(t){for(var i=[],n=[],a=0;t.length>a;a++)i.push(t.charCodeAt(a));for(var s=0;i.length>s;s++)n.push(String.fromCharCode(i[s]+(e&&1==e?1584:1728)));return n.join("")})},String.prototype.toEngilshDigit=function(e){return this.replace(/\d+/g,function(t){for(var i=[],n=[],a=0;t.length>a;a++)i.push(t.charCodeAt(a));for(var s=0;i.length>s;s++)n.push(String.fromCharCode(i[s]-(e&&1==e?1584:1728)));return i.join("")})};var o=function(e,t){clearTimeout(window.datepickerTimer),window.datepickerTimer=setTimeout(e,t)},c=function(e){for(var t=[],i=0;e-1>=i;)t.push(i),i++;return t},h=function(e,t){var i=function(e){return $.extend(!0,{},e)},a=[!0,e,i(n)],s=[];for(var r in t){var o=i(t[r]);o&&(o.events&&Object.keys(o.events).length>0&&s.push(o.events),o.events={},a.push(o))}$.extend.apply(e,a);for(var r in s){var c=s[r],h=Object.keys(c);for(var d in h){var l=h[d],u=c[l];l&&u&&e.attachEvent(l,u)}}return e.init(),e};if(jQuery.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},!jQuery.browser){var d=jQuery.uaMatch(window.navigator.userAgent),l={};d.browser&&(l[d.browser]=!0,l.version=d.version),l.chrome?l.webkit=!0:l.webkit&&(l.safari=!0),jQuery.browser=l}var u={state:{year:null,month:null,date:null,firstWeekDayOfMonth:null,daysCount:null},persianDigit:!0,_formatDigit:function(e){return this.persianDigit?(""+e).toPersianDigit():e},events:{init:function(){},render:function(){this.state.month=this.month,this.state.year=this.year},reRender:function(){this._markToday()},selectDay:function(){}},_markToday:function(){var e=this,t=new persianDate;return $(e.element).removeClass(e.cssClass.today),$.each(e.daysList,function(){var i=$(this).data().day,n=$(this).data().month,a=$(this).data().year;i==t.date()&&n==t.month()&&a==t.year()&&($(this).addClass(e.cssClass.today),$(e.element).addClass(e.cssClass.today))}),this},_updateState:function(){var e=this,t=new persianDate;return e.daysCount=t.daysInMonth(e.state.year,e.state.month),e.firstWeekDayOfMonth=t.getFirstWeekDayOfMonth(e.state.year,e.state.month),this},selectDate:function(e){var t,i=this,n=new persianDate(e);return t=i.state.year==n.year()&&i.state.month==n.month()?!1:!0,i.state.year=n.year(),i.state.month=n.month(),i.state.date=n.date(),t&&i.view.renderDays(i),i.markSelectedDate(e),this},markSelectedDate:function(e){var t=this;$.each(t.daysList,function(i,n){var a=parseInt($(n).attr("unixDate"));t.isSameDay(a,e)?$(this).addClass(t.cssClass.selected):$(this).removeClass(t.cssClass.selected)})},updateAs:function(e,t){var i=this;return i.state.year=e,i.state.month=t,i.view.renderDays(i),this},goToNextMonth:function(){var e=this;return 12===e.state.month?(e.state.month=1,e.state.viewYear+=1):e.state.month+=1,e.updateAs(e.state.year,e.state.month),!1},goToPrevMonth:function(){},goToYear:function(e){this.updateAs(e,this.state.month)},applyStory:function(){}};MonthGrid=function(e){return h(this,[a,p,t,u,e]),this};var p={cssClass:{main:"month-grid-box",header:"header",headerTitle:"title",headerRow:"header-row",headerRowCell:"header-row-cell",daysTable:"table-days",currentMonth:"current-month",today:"today",selected:"selected",disbaled:"disabled"},views:{"default":{render:function(e){e.viewData={css:e.cssClass},e.element=$.tmplMustache(i.monthGrid,e.viewData).appendTo(e.container),e.header=e.createElementByClass(e.cssClass.header),e.headerRow=e.createElementByClass(e.cssClass.headerRow);var t;for(t in e.weekRange)$("<div/>").text(e.weekRange[t].abbr.fa).addClass(e.cssClass.headerRowCell).appendTo(e.headerRow)[0];e.daysBox=e.createElementByClass(e.cssClass.daysTable),this.renderDays(e)},renderDays:function(e){e._updateState(),e.daysList=[];var t=function(t,i,n,a){var s=new persianDate([n,i,t]).valueOf(),r=$("<span/>").text(e._formatDigit(t)).attr("unixDate",s).data({day:t,month:i,year:n,unixDate:s}).addClass(a).appendTo($(this))[0];e.daysList.push(r)},i=new persianDate;e.daysCount=i.daysInMonth(e.state.year,e.state.month),e.firstWeekDayOfMonth=i.getFirstWeekDayOfMonth(e.state.year,e.state.month);var n=1,a=1;$(e.daysBox).find("td").each(function(s){if($(this).empty(),e.firstWeekDayOfMonth>1&&e.firstWeekDayOfMonth>s+1){if(1===e.state.month)var r=12,o=parseInt(e.state.year)-1;else var r=parseInt(e.state.month)-1,o=parseInt(e.state.year);var c=i.daysInMonth(o,r),h=parseInt(c-e.firstWeekDayOfMonth+(s+2));t.apply(this,[h,r,o,"other-month"])}else if(s+2===n+e.firstWeekDayOfMonth&&e.daysCount>=n){var h=n;t.apply(this,[h,parseInt(e.state.month),parseInt(e.state.year)]),n++}else{if(12===e.state.month)var d=1,l=parseInt(e.state.year)+1;else var d=parseInt(e.state.month)+1,l=e.state.year;var h=a;t.apply(this,[h,d,l,"other-month"]),a+=1}var u=$(this).children("span").data("unixDate");e.datepicker.state._filetredDate?e.minDate&&e.maxDate?u>=e.minDate&&e.maxDate>=u?$(this).addClass(e.cssClass.disbaled):$(this).removeClass(e.cssClass.disbaled):e.minDate?u>=e.minDate&&$(this).addClass(e.cssClass.disbaled):e.maxDate&&e.maxDate>=u&&$(this).removeClass(e.cssClass.disbaled):e.datepicker.checkDate(u)?$(this).removeClass(e.cssClass.disbaled):$(this).addClass(e.cssClass.disbaled)}),$(e.daysBox).find("td").not(".disabled").children("span").click(function(){var t=$(this).data("unixDate");return e.raiseEvent("selectDay",[t]),!1}),$(e.daysBox).find("td.disabled").children("span").click(function(){return!1}),e.raiseEvent("reRender")}}}},v={cssClass:{datePickerPlotArea:"datepicker-plot-area",yearView:"datepicker-year-view",monthView:"datepicker-month-view",dayView:"datepicker-day-view",timeView:"datepicker-time-view",navigator:"navigator",toolbox:"toolbox "},container:{},views:{"default":{render:function(e){var t={css:e.cssClass};return e.element={},e.element.main=$.tmplMustache(i.datepciker,t).appendTo(e.$container),e._inlineView?(e.element.main.addClass("datepicker-plot-area-inline-view"),e.element.main.show()):e.element.main.hide(),e.view.fixPosition(e),e.container.navigator=$(e.element.main).children("."+e.cssClass.navigator),e.container.dayView=$(e.element.main).children("."+e.cssClass.dayView),e.container.monthView=$(e.element.main).children("."+e.cssClass.monthView),e.container.yearView=$(e.element.main).children("."+e.cssClass.yearView),e.container.timeView=$(e.element.main).children("."+e.cssClass.timeView),e.container.toolbox=$(e.element.main).children("."+e.cssClass.toolbox),e.navigator.enabled&&0==e.onlyTimePicker?e.navigator=new y($.extend(!0,e.navigator,{datepicker:e}),e.container.navigator):(e.container.navigator.remove(),e.navigator=!1),e.toolbox.enabled&&e.onlyTimePicker===!1?e.toolbox=new C($.extend(!0,e.toolbox,{datepicker:e}),e.container.toolbox):(e.container.toolbox.remove(),e.toolbox=!1),e.dayPicker.enabled&&e.onlyTimePicker===!1?(e.dayPicker=new D($.extend(!0,e.dayPicker,{datepicker:e}),e.container.dayView),e._pickers.day=e.dayPicker):(e.container.dayView.hide(),e.dayPicker=!1),e.monthPicker.enabled&&e.onlyTimePicker===!1?(e.monthPicker=new b($.extend(!0,e.monthPicker,{datepicker:e}),e.container.monthView),e._pickers.month=e.monthPicker):(e.monthPicker=!1,e.container.monthView.hide()),e.yearPicker.enabled&&e.onlyTimePicker===!1?(e.yearPicker=new _($.extend(!0,e.yearPicker,{datepicker:e}),e.container.yearView),e._pickers.year=e.yearPicker):(e.yearPicker=!1,e.container.yearView.hide()),e.timePicker.enabled|e.onlyTimePicker===!0?e.timePicker=new I($.extend(!0,e.timePicker,{datepicker:e}),e.container.timeView):e.container.timeView.hide(),e.changeView(e.viewMode),e._syncWithImportData(e.state.unixDate),this},fixPosition:function(e){if(!e._inlineView){var t=e.inputElem.offset().top,i=e.inputElem.offset().left;if("auto"===e.position){var n=e.fullHeight(e.inputElem);e.element.main.css({top:t+n+"px",left:i+"px"})}else e.element.main.css({top:t+e.position[0]+"px",left:i+e.position[1]+"px"})}return this}}}},m={_pickers:{},_viewed:!1,_inlineView:!1,_getNextState:function(e){var t=this.currentView,i=this.currentView;return"next"===e?("month"===t&&this.dayPicker&&(i="day"),"year"===t&&(this.monthPicker?i="month":this.dayPicker&&(i="day"))):"prev"===e&&("month"===t&&this.yearPicker&&(i="year"),"day"===t&&(this.monthPicker?i="month":this.yearPicker&&(i="year"))),this._checkNextStateAvalibility(i)},_checkNextStateAvalibility:function(e){return this._pickers[e]?e:(this.element.main.hide(),!1)},updateNavigator:function(e){return this.navigator&&this.navigator.updateSwitchBtn(this._formatDigit(e)),this},switchNavigatorRelation:function(e){return this.navigator&&this.navigator.switchRelation(e),this},changeView:function(e,t){var i,n=this;return i=t?this._getNextState(t):this._checkNextStateAvalibility(e),i&&(n.publishInDic(n._pickers,"hide"),n._pickers[i].show(),n.switchNavigatorRelation(i),n.currentView=i),this},_flagSelfManipulate:!0,selectTime:function(e,t){this.state.setTime(e,t),this._updateInputElement(),this.onSelect(e,this)},selectDate:function(e){var t=this;switch(t.state.setSelected("unix",e),this.state.syncViewWithelected(),t.currentView){case"month":t.monthPicker.selectMonth();break;case"year":t.yearPicker.selectYear();break;case"day":t.dayPicker.selectDay()}return t._updateInputElement(),t.onSelect(e,this),t.autoClose&&t.element.main.hide(),this},selectDateTime:function(e){var t=this;switch(t.state.setSelectedDateTime("unix",e),this.state.syncViewWithelected(),t.currentView){case"month":t.monthPicker.selectMonth();break;case"year":t.yearPicker.selectYear();break;case"day":t.dayPicker.selectDay()}return t._updateInputElement(),t.onSelect(e,this),t.autoClose&&t.element.main.hide(),this},selectMonth:function(e){var t=this;return this.justSelectOnDate?t.state.setView("month",e):(t.state.setSelected("month",e),t.state.setSelected("year",t.state.view.year),t.state.syncViewWithelected()),t._updateInputElement(),t.changeView(t.currentView,"next"),this},selectYear:function(e){var t=this;return this.justSelectOnDate?t.state.setView("year",e):(t.state.setSelected("year",e),t.state.syncViewWithelected()),t._updateInputElement(),t.changeView(t.currentView,"next"),this},_formatDigit:function(e){return this.persianDigit&&e?(""+e).toPersianDigit():e},_syncWithImportData:function(e){if(e){var t=this;if(jQuery.isNumeric(e)){var i=new persianDate(e);t.state.setSelected("unix",i),t._updateInputElement()}else{var n=t.validatePersianDateString(e);null!=n&&o(function(){var e=new persianDate(n);t.selectDate(e.valueOf())},t.inputDelay)}}return this},_attachEvents:function(){var e=this;if($(window).resize(function(){e.view.fixPosition(e)}),e.observer){e.inputElem.bind("paste",function(t){o(function(){e._syncWithImportData(t.target.value)},60)}),$(e.altField).bind("change",function(){if(!e._flagSelfManipulate){var t=new Date($(this).val());if("Invalid Date"!==t){var i=new persianDate(t);e.selectDate(i.valueOf())}}});var t=!1,i=[17,91],n=86;$(document).keydown(function(e){$.inArray(e.keyCode,i)>0&&(t=!0)}).keyup(function(e){$.inArray(e.keyCode,i)>0&&(t=!1)}),e.inputElem.bind("keyup",function(a){var s=$(this);if(!e._flagSelfManipulate){var r=!1;(8===a.keyCode||105>a.keyCode&&a.keyCode>96||58>a.keyCode&&a.keyCode>47||t&&(a.keyCode==n||$.inArray(a.keyCode,i)>0))&&(r=!0),r&&e._syncWithImportData(s.val())}})}return e.inputElem.focus(function(){e.show()}),e.inputElem.click(function(e){return e.stopPropagation(),!1}),e.inputElem.blur(function(){$.browser.msie||e.hide()}),$(document).not(".datepicker-plot-area,.datepicker-plot-area > *").click(function(){e.inputElem.blur(),e.hide()}),$(e.element.main).mousedown(function(e){return e.stopPropagation(),!1}),this},_updateInputElement:function(){var e=this;return e._flagSelfManipulate=!0,e.altField.val(e.altFieldFormatter(e.state.selected.unixDate)).trigger("change"),e.inputElem.val(e.formatter(e.state.selected.unixDate)).trigger("change"),e._flagSelfManipulate=!1,e},_defineOnInitState:function(){if("INPUT"==$(this.$container)[0].nodeName){var e=new Date(this.inputElem.val()).valueOf();this.$container=$("body")}else{var e=new Date($(this.$container).data("date")).valueOf();this._inlineView=!0}return this.state.unixDate=e&&"undefined"!=e?e:(new Date).valueOf(),this.altField=$(this.altField),this.state.setSelectedDateTime("unix",this.state.unixDate),this.state.setTime("unix",this.state.unixDate),this.state.setView("unix",this.state.unixDate),this},setTime:function(){this.timePicker.setTime(this.state.selected.unixDate)},setDate:function(e){var t=new persianDate(e);if(this.timePicker.enabled)return this.selectDateTime(t.valueOf()),this.setTime(),this;else return this.selectDateTime(t.valueOf()),this},init:function(){var e=this;return this.state=new T({datepicker:e}),this.compatConfig(),this._defineOnInitState(),this._updateInputElement(),this.view=this.views["default"],this.view.render(this),this.inputElem.data("datepicker",this),this.inputElem.addClass(e.cssClass),this._attachEvents(),this}},f=function(t,i){return h(this,[a,s,m,v,e,i,{$container:t,inputElem:$(t)}])},w={enabled:!0,text:{btnNextText:"<",btnPrevText:">"},cssClass:{datpickerHeader:"datepicker-header",btnNext:"btn-next",btnSwitch:"btn-switch",btnPrev:"btn-prev"},relation:"day",switchRelation:function(e){return this.relation=e,this.onSwitch(e),this},updateSwitchBtn:function(e){return $(this.element).children("."+this.cssClass.btnSwitch).text(e),this},_next:function(){return this.datepicker[this.relation+"Picker"].next(),this.onNext(this),this},_prev:function(){return this.datepicker[this.relation+"Picker"].prev(),this.onPrev(this),this},_switch:function(){return this.datepicker.changeView(this.relation,"prev"),this},_render:function(){var e=this;e.viewData={css:e.cssClass,btnNextText:e.text.btnNextText,btnPrevText:e.text.btnPrevText},e.element=$.tmplMustache(i.navigator,e.viewData).appendTo(e.$container)},_attachEvents:function(){var e=this;e.element.children("."+e.cssClass.btnPrev).click(function(){return e._prev(),!1}),e.element.children("."+e.cssClass.btnNext).click(function(){return e._next(),!1}),e.element.children("."+e.cssClass.btnSwitch).click(function(){return e._switch(),!1})},init:function(){var e=this;return e._render(),e._attachEvents(),this}},y=function(e,t){return h(this,[a,w,e,{$container:t}])},k={next:function(){var e=this;return 12===e.datepicker.state.view.month?(e.datepicker.state.setView("month",1),e.datepicker.state.setView("year",parseInt(e.datepicker.state.view.year)+1)):e.datepicker.state.setView("month",parseInt(e.datepicker.state.view.month)+1),e._updateView(),this},prev:function(){var e=this;return 1===e.datepicker.state.view.month?(e.datepicker.state.setView("month",12),e.datepicker.state.setView("year",parseInt(e.datepicker.state.view.year)-1)):e.datepicker.state.setView("month",parseInt(e.datepicker.state.view.month)-1),e._updateView(),this},updateView:function(){return this._updateView(),this},_updateView:function(){var e=this;return e.mGrid.updateAs(e.datepicker.state.view.year,e.datepicker.state.view.month),e._updateNavigator(e.datepicker.state.view.year,e.datepicker.state.view.month),this._updateSelectedDay(e.datepicker.state.selected.unixDate),this},selectDay:function(){var e=this;return e.mGrid.updateAs(e.datepicker.state.selected.year,e.datepicker.state.selected.month),e._updateNavigator(e.datepicker.state.selected.year,e.datepicker.state.selected.month),this._updateSelectedDay(e.datepicker.state.selected.unixDate),this._updateView(),this},_updateNavigator:function(e,t){var i=this,n=this.titleFormatter(e,t);return i.datepicker.updateNavigator(n),this},hide:function(){return this.container.hide(),this},show:function(){return this.container.show(),this._updateView(),this},_updateSelectedDay:function(e){return this.mGrid.markSelectedDate(e),this},_attachEvents:function(){var e=this;return this.scrollEnabled&&($(this.container).mousewheel(function(t){t.deltaY>0?e.next():e.prev()}),$(this.container).bind("mousewheel DOMMouseScroll",function(e){var t=null;"mousewheel"==e.type?t=-1*e.originalEvent.wheelDelta:"DOMMouseScroll"==e.type&&(t=40*e.originalEvent.detail),t&&(e.preventDefault(),$(this).scrollTop(t+$(this).scrollTop()))})),this},_render:function(){var e=this;this.mGrid=new MonthGrid({container:e.container,persianDigit:e.datepicker.persianDigit,month:e.datepicker.state.selected.month,year:e.datepicker.state.selected.year,minDate:e.datepicker.state.filterDate.start.unixDate,maxDate:e.datepicker.state.filterDate.end.unixDate,datepicker:e.datepicker}),this.mGrid.attachEvent("selectDay",function(t){e.datepicker.selectDate(t),e.onSelect(t),e.mGrid.selectDate(e.datepicker.state.selected.unixDate)}),this._updateSelectedDay(e.datepicker.state.selected.unixDate)},init:function(){var e=this;return this._render(),this._attachEvents(),this._updateNavigator(e.datepicker.state.selected.year,e.datepicker.state.selected.month),this}},D=function(e,t){return h(this,[a,k,e,{container:t}])},g={cssClass:{selectedMonth:"selected",monthItem:"month-item",disbaleItem:"month-item-disable"},monthRange:t.monthRange,_updateNavigator:function(){var e=this;return e.datepicker.updateNavigator(this.titleFormatter(e.datepicker.state.view.unixDate)),this},hide:function(){return this.container.hide(),this},show:function(){return this.container.show(),this._updateNavigator(),this._render(),this},selectMonth:function(){this.defineSelectedMonth(),this._updateNavigator()},defineSelectedMonth:function(){var e=this;return e.container.children("."+e.cssClass.monthItem).removeClass(e.cssClass.selectedMonth),e.datepicker.state.view.year===e.datepicker.state.selected.year&&e.container.children(".month"+e.datepicker.state.selected.month).addClass(e.cssClass.selectedMonth),this},next:function(){var e=this;return e.datepicker.state.setView("year",e.datepicker.state.view.year+1),e.updateView(),e._render(),this},prev:function(){var e=this;return e.datepicker.state.setView("year",e.datepicker.state.view.year-1),e.updateView(),e._render(),this},updateView:function(){return this.defineSelectedMonth(),this._updateNavigator(),this},_checkMonthAccess:function(e){if(this.datepicker.state._filetredDate){var t=this.datepicker.state.view.year,i=1e3*new pDate([t,e]).unix();return i>=this.datepicker.state.filterDate.start.unixDate&&this.datepicker.state.filterDate.end.unixDate>=i?!0:!1}return this.datepicker.checkMonth(e)},_attachEvents:function(){var e=this;return this.scrollEnabled&&($(this.container).mousewheel(function(t){t.deltaY>0?e.next():e.prev()}),$(this.container).bind("mousewheel DOMMouseScroll",function(e){var t=null;"mousewheel"==e.type?t=-1*e.originalEvent.wheelDelta:"DOMMouseScroll"==e.type&&(t=40*e.originalEvent.detail),t&&(e.preventDefault(),$(this).scrollTop(t+$(this).scrollTop()))})),this},_render:function(){var e,t=this;t.container.empty();for(e in this.monthRange){var i=$("<div/>").data({monthIndex:e}).addClass("month"+e).addClass(t.cssClass.monthItem).text(t.monthRange[e].name.fa).appendTo(t.container);t._checkMonthAccess(e)?i.click(function(){return t.onSelect($(this).data().monthIndex),t.datepicker.selectMonth(parseInt($(this).data().monthIndex)),!1}):(i.addClass(t.cssClass.disbaleItem),i.click(function(){return!1}))}return this.defineSelectedMonth(),this},init:function(){return this._render(),this._attachEvents(),this}},b=function(e,t){return h(this,[a,g,e,{container:t}])},x={cssClass:{selectedYear:"selected",yearItem:"year-item",disbaleItem:"year-item-disable"},events:{select:function(){}},_updateNavigator:function(){var e=this,t=e.datepicker.state.view.year;return e.datepicker.updateNavigator(e.titleFormatter(t)),this},hide:function(){return this.container.hide(),this},show:function(){return this.container.show(),this.updateView(),this},next:function(){var e=this;return e.datepicker.state.view.year+=12,e._render().updateView(),this},prev:function(){var e=this;return e.datepicker.state.view.year-=12,e._render().updateView(),this},selectYear:function(){this.updateView()},updateView:function(){var e=this;return e._render(),e.container.children("."+e.cssClass.yearItem).each(function(){$(this).removeClass(e.cssClass.selectedYear),$(this).data().year===e.datepicker.state.selected.year&&$(this).addClass(e.cssClass.selectedYear)}),e._updateNavigator(),this},_checkYearAccess:function(e){if(this.datepicker.state._filetredDate){var t=this.datepicker.state.filterDate.start.year,i=this.datepicker.state.filterDate.end.year;return e>=t&i>=e?!0:!1}return this.datepicker.checkYear(e)},_attachEvents:function(){var e=this;return this.scrollEnabled&&($(this.container).mousewheel(function(t){t.deltaY>0?e.next():e.prev()}),$(this.container).bind("mousewheel DOMMouseScroll",function(e){var t=null;"mousewheel"==e.type?t=-1*e.originalEvent.wheelDelta:"DOMMouseScroll"==e.type&&(t=40*e.originalEvent.detail),t&&(e.preventDefault(),$(this).scrollTop(t+$(this).scrollTop()))})),this},_render:function(){var e,t=this,i=t.datepicker.state.view.year,n=12*parseInt(i/12);t.container.children("."+t.cssClass.yearItem).remove();var a;for(a in c(12))e=$("<div/>").addClass(t.cssClass.yearItem).data({year:n+parseInt(a)}).text(t.datepicker._formatDigit(n+parseInt(a))).appendTo(t.container),i===n+parseInt(a)&&e.addClass(t.cssClass.selectedYear),t._checkYearAccess(n+parseInt(a))?e.click(function(){var e=$(this).data().year;return t.datepicker.selectYear(parseInt(e)),t.onSelect(e),!1}):(e.addClass(t.cssClass.disbaleItem),e.click(function(){return!1}));return this},init:function(){return this._render(),this._attachEvents(),this}},_=function(e,t){return h(this,[a,x,e,{container:t}])},S={text:{btnToday:"امروز"},enabled:!0,cssClass:{btnToday:"btn-today"},_goToday:function(){var e=this,t=(new Date).valueOf();return e.datepicker.selectDate(t),this.onToday(this),this},_render:function(){var e=this;return this.todayBtn=$("<div></div>").text(e.text.btnToday).addClass(e.cssClass.btnToday).click(function(){return e._goToday(),!1}).appendTo(this.$container),this},init:function(){return this._render()}},C=function(e,t){return h(this,[a,S,e,{$container:t}])},M={secondStep:1,minuteStep:1,hourStep:1,cssClss:{timepicker:"viewModel"},show:function(){"use strict";return this.container.show(),this},hide:function(){"use strict";return this.container.hide(),this},_render:function(){var e=this,t={css:e.cssClass};return $.tmplMustache(i.timepicker,t).appendTo(this.container),this
},_currentMeridian:null,convert24hTo12:function(e){var t=e,i="AM";return e>=12&&(t=e-12,i="PM"),0===e&&(t=12),[t,i]},convert12hTo24:function(e){var t=e;return"PM"===this._currentMeridian&&12>e&&(t=e+12),"AM"===this._currentMeridian&&12===e&&(t=e-12),t},_updateTime:function(e){var t=e.selected,i=this.convert24hTo12(t.hour);return this.hourInput.val(t.hour),this.minuteInput.val(t.minute),this.secondInput.val(t.second),this.meridianInput.val(t.dateObj.format("a")),this._currentMeridian=i[1],this.meridianInput.attr({"data-meridian-mode":this._currentMeridian}),this},_updateMeridian:function(e){var t=e.selected;return this.meridianInput.val(t.dateObj.format("a")),this},_toggleMeridian:function(){return"AM"===this._currentMeridian?(this._currentMeridian="PM",this.meridianInput.val("PM")):"PM"===this._currentMeridian&&(this._currentMeridian="AM",this.meridianInput.val("AM")),this},_movehour:function(e){var t=parseInt(this.hourInput.val());return"up"===e?t>=12?t=this.hourStep:t+=this.hourStep:1>=t?t=12:t-=this.hourStep,this.hourInput.val(t),this._updateState("hour",this.convert12hTo24(t)),this},_moveminute:function(e){var t=parseInt(this.minuteInput.val());return"up"===e?59===t?t=0:t+=this.minuteStep:0===t?t=59:t-=this.minuteStep,this.minuteInput.val(t),this._updateState("minute",t),this},_movesecond:function(e){var t=parseInt(this.secondInput.val());return"up"===e?59===t?t=0:t+=this.secondStep:0===t?t=59:t-=this.secondStep,this.secondInput.val(t),this._updateState("second",t),this},_movemeridian:function(){return this._toggleMeridian(),this._updateState("hour",this.convert12hTo24(parseInt(this.hourInput.val()))),this},_updateState:function(e,t){return this.datepicker.selectTime(e,t),this._updateMeridian(this.datepicker.state),this},_attachEvent:function(){var e=this;return $(".up-btn",this.container).click(function(){return e["_move"+$(this).parent().attr("data-time-key")]("up"),!1}),$(".down-btn",this.container).click(function(){return e["_move"+$(this).parent().attr("data-time-key")]("down"),!1}),this.scrollEnabled&&($("> div.time-segment",this.container).mousewheel(function(t){var i="down";t.deltaY>0&&(i="up"),e["_move"+$(this).attr("data-time-key")](i)}),$("> div.time-segment",this.container).bind("mousewheel DOMMouseScroll",function(e){var t=null;"mousewheel"==e.type?t=-1*e.originalEvent.wheelDelta:"DOMMouseScroll"==e.type&&(t=40*e.originalEvent.detail),t&&(e.preventDefault(),$(this).scrollTop(t+$(this).scrollTop()))})),this},_bootstrap:function(){return this.showMeridian===!1&&($(".meridian",this.container).hide(),$(".meridian-divider",this.container).hide(),$(".time-segment",this.container).css({width:"31%"})),this.showSeconds===!1&&($(".second",this.container).hide(),$(".second-divider",this.container).hide(),$(".time-segment",this.container).css({width:"31%"})),this.showMeridian===!1&&this.showSeconds===!1&&$(".time-segment",this.container).css({width:"47%"}),this.hourInput=$(".hour-input",this.container),this.minuteInput=$(".minute-input",this.container),this.secondInput=$(".second-input",this.container),this.meridianInput=$(".meridian-input",this.container),this._updateTime(this.datepicker.state),this},setTime:function(e){var t=new persianDate(e);this._updateState("hour",t.hour()),this._updateState("minute",t.minute()),this._updateState("second",t.second()),this.minuteInput.val(t.minute()),this.secondInput.val(t.second()),this.hourInput.val(t.hour())},init:function(){return this._render()._bootstrap()._attachEvent(),this}},I=function(e,t){return h(this,[a,M,e,{container:t}])},P={filterDate:{start:{year:0,month:0,date:0,hour:0,minute:0,second:0,unixDate:0},end:{year:0,month:0,date:0,hour:0,minute:0,second:0,unixDate:100}},view:{year:0,month:0,date:0,hour:0,minute:0,second:0,unixDate:0},selected:{year:0,month:0,date:0,hour:0,minute:0,second:0,unixDate:0},setFilterDate:function(e,t,i){var n=this;t||(t=-99999999999999);var a=new persianDate(t);n.filterDate.start.unixDate=t,n.filterDate.start.hour=a.hour(),n.filterDate.start.minute=a.minute(),n.filterDate.start.second=a.second(),n.filterDate.start.month=a.month(),n.filterDate.start.date=a.date(),n.filterDate.start.year=a.year(),i||(i=99999999999999);var a=new persianDate(i);n.filterDate.end.unixDate=i,n.filterDate.end.hour=a.hour(),n.filterDate.end.minute=a.minute(),n.filterDate.end.second=a.second(),n.filterDate.end.month=a.month(),n.filterDate.end.date=a.date(),n.filterDate.end.year=a.year()},_updateSelectedUnix:function(){return this.selected.dateObj=new persianDate([this.selected.year,this.selected.month,this.selected.date,this.selected.hour,this.selected.minute,this.selected.second]),this.selected.unixDate=this.selected.dateObj.valueOf(),this},setTime:function(e,t){var i=this;switch(e){case"unix":i.selected.unixDate=t;var n=new persianDate(t);i.selected.hour=n.hour(),i.selected.minute=n.minute(),i.selected.second=n.second(),i._updateSelectedUnix();break;case"hour":this.selected.hour=t,i._updateSelectedUnix();break;case"minute":this.selected.minute=t,i._updateSelectedUnix();break;case"second":this.selected.second=t,i._updateSelectedUnix()}return this},setSelected:function(e,t){var i=this;switch(e){case"unix":i.selected.unixDate=t;var n=new persianDate(t);i.selected.year=n.year(),i.selected.month=n.month(),i.selected.date=n.date(),i._updateSelectedUnix();break;case"year":this.selected.year=t,i._updateSelectedUnix();break;case"month":this.selected.month=t,i._updateSelectedUnix();break;case"date":this.selected.month=t,i._updateSelectedUnix()}return this},setSelectedDateTime:function(e,t){var i=this;switch(e){case"unix":i.selected.unixDate=t;var n=new persianDate(t);i.selected.year=n.year(),i.selected.month=n.month(),i.selected.date=n.date(),i.selected.hour=n.hour(),i.selected.minute=n.minute(),i.selected.second=n.second(),i._updateSelectedUnix();break;case"year":this.selected.year=t,i._updateSelectedUnix();break;case"month":this.selected.month=t,i._updateSelectedUnix();break;case"date":this.selected.month=t,i._updateSelectedUnix()}return this},syncViewWithelected:function(){return this.view.year=this.selected.year,this.view.month=this.selected.month,this.view.date=this.selected.date,this.view.unixDate=this.selected.unixDate,this},_updateViewUnix:function(){return this.view.dateObj=new persianDate([this.view.year,this.view.month,this.view.date,this.view.hour,this.view.minute,this.view.second]),this.view.unixDate=this.view.dateObj.valueOf(),this},setView:function(e,t){var i=this;switch(e){case"unix":var n=new persianDate(t);i.view.year=n.year(),i.view.month=n.month(),i.view.date=n.date(),i.view.unixDate=t;break;case"year":this.view.year=t,this._updateViewUnix();break;case"month":this.view.month=t,this._updateViewUnix();break;case"date":this.view.month=t,this._updateViewUnix()}return this}},T=function(e){return h(this,[P,e])};(function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e:e(jQuery)})(function(e){function t(t){var r=t||window.event,o=c.call(arguments,1),h=0,l=0,u=0,p=0,v=0,m=0;if(t=e.event.fix(r),t.type="mousewheel","detail"in r&&(u=-1*r.detail),"wheelDelta"in r&&(u=r.wheelDelta),"wheelDeltaY"in r&&(u=r.wheelDeltaY),"wheelDeltaX"in r&&(l=-1*r.wheelDeltaX),"axis"in r&&r.axis===r.HORIZONTAL_AXIS&&(l=-1*u,u=0),h=0===u?l:u,"deltaY"in r&&(u=-1*r.deltaY,h=u),"deltaX"in r&&(l=r.deltaX,0===u&&(h=-1*l)),0!==u||0!==l){if(1===r.deltaMode){var f=e.data(this,"mousewheel-line-height");h*=f,u*=f,l*=f}else if(2===r.deltaMode){var w=e.data(this,"mousewheel-page-height");h*=w,u*=w,l*=w}if(p=Math.max(Math.abs(u),Math.abs(l)),(!s||s>p)&&(s=p,n(r,p)&&(s/=40)),n(r,p)&&(h/=40,l/=40,u/=40),h=Math[h>=1?"floor":"ceil"](h/s),l=Math[l>=1?"floor":"ceil"](l/s),u=Math[u>=1?"floor":"ceil"](u/s),d.settings.normalizeOffset&&this.getBoundingClientRect){var y=this.getBoundingClientRect();v=t.clientX-y.left,m=t.clientY-y.top}return t.deltaX=l,t.deltaY=u,t.deltaFactor=s,t.offsetX=v,t.offsetY=m,t.deltaMode=0,o.unshift(t,h,l,u),a&&clearTimeout(a),a=setTimeout(i,200),(e.event.dispatch||e.event.handle).apply(this,o)}}function i(){s=null}function n(e,t){return d.settings.adjustOldDeltas&&"mousewheel"===e.type&&0===t%120}var a,s,r=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],o="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],c=Array.prototype.slice;if(e.event.fixHooks)for(var h=r.length;h;)e.event.fixHooks[r[--h]]=e.event.mouseHooks;var d=e.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var i=o.length;i;)this.addEventListener(o[--i],t,!1);else this.onmousewheel=t;e.data(this,"mousewheel-line-height",d.getLineHeight(this)),e.data(this,"mousewheel-page-height",d.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var i=o.length;i;)this.removeEventListener(o[--i],t,!1);else this.onmousewheel=null;e.removeData(this,"mousewheel-line-height"),e.removeData(this,"mousewheel-page-height")},getLineHeight:function(t){var i=e(t),n=i["offsetParent"in e.fn?"offsetParent":"parent"]();return n.length||(n=e("body")),parseInt(n.css("fontSize"),10)||parseInt(i.css("fontSize"),10)||16},getPageHeight:function(t){return e(t).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})})})();(function(b){b.widget("ui.tagit",{options:{allowDuplicates:!1,caseSensitive:!0,fieldName:"tags",placeholderText:null,readOnly:!1,removeConfirmation:!1,tagLimit:null,availableTags:[],autocomplete:{},showAutocompleteOnFocus:!1,allowSpaces:!1,singleField:!1,singleFieldDelimiter:",",singleFieldNode:null,animate:!0,tabIndex:null,beforeTagAdded:null,afterTagAdded:null,beforeTagRemoved:null,afterTagRemoved:null,onTagClicked:null,onTagLimitExceeded:null,onTagAdded:null,onTagRemoved:null,tagSource:null},_create:function(){var a=
this;this.element.is("input")?(this.tagList=b("<ul></ul>").insertAfter(this.element),this.options.singleField=!0,this.options.singleFieldNode=this.element,this.element.addClass("tagit-hidden-field")):this.tagList=this.element.find("ul, ol").andSelf().last();this.tagInput=b('<input type="text" />').addClass("ui-widget-content");this.options.readOnly&&this.tagInput.attr("disabled","disabled");this.options.tabIndex&&this.tagInput.attr("tabindex",this.options.tabIndex);this.options.placeholderText&&this.tagInput.attr("placeholder",
this.options.placeholderText);this.options.autocomplete.source||(this.options.autocomplete.source=function(a,e){var d=a.term.toLowerCase(),c=b.grep(this.options.availableTags,function(a){return 0===a.toLowerCase().indexOf(d)});this.options.allowDuplicates||(c=this._subtractArray(c,this.assignedTags()));e(c)});this.options.showAutocompleteOnFocus&&(this.tagInput.focus(function(b,d){a._showAutocomplete()}),"undefined"===typeof this.options.autocomplete.minLength&&(this.options.autocomplete.minLength=
0));b.isFunction(this.options.autocomplete.source)&&(this.options.autocomplete.source=b.proxy(this.options.autocomplete.source,this));b.isFunction(this.options.tagSource)&&(this.options.tagSource=b.proxy(this.options.tagSource,this));this.tagList.addClass("tagit").addClass("ui-widget ui-widget-content ui-corner-all").append(b('<li class="tagit-new"></li>').append(this.tagInput)).click(function(d){var c=b(d.target);c.hasClass("tagit-label")?(c=c.closest(".tagit-choice"),c.hasClass("removed")||a._trigger("onTagClicked",
d,{tag:c,tagLabel:a.tagLabel(c)})):a.tagInput.focus()});var c=!1;if(this.options.singleField)if(this.options.singleFieldNode){var d=b(this.options.singleFieldNode),f=d.val().split(this.options.singleFieldDelimiter);d.val("");b.each(f,function(b,d){a.createTag(d,null,!0);c=!0})}else this.options.singleFieldNode=b('<input type="hidden" style="display:none;" value="" name="'+this.options.fieldName+'" />'),this.tagList.after(this.options.singleFieldNode);c||this.tagList.children("li").each(function(){b(this).hasClass("tagit-new")||
(a.createTag(b(this).text(),b(this).attr("class"),!0),b(this).remove())});this.tagInput.keydown(function(c){if(c.which==b.ui.keyCode.BACKSPACE&&""===a.tagInput.val()){var d=a._lastTag();!a.options.removeConfirmation||d.hasClass("remove")?a.removeTag(d):a.options.removeConfirmation&&d.addClass("remove ui-state-highlight")}else a.options.removeConfirmation&&a._lastTag().removeClass("remove ui-state-highlight");if(c.which===b.ui.keyCode.COMMA&&!1===c.shiftKey||c.which===b.ui.keyCode.ENTER||c.which==
b.ui.keyCode.TAB&&""!==a.tagInput.val()||c.which==b.ui.keyCode.SPACE&&!0!==a.options.allowSpaces&&('"'!=b.trim(a.tagInput.val()).replace(/^s*/,"").charAt(0)||'"'==b.trim(a.tagInput.val()).charAt(0)&&'"'==b.trim(a.tagInput.val()).charAt(b.trim(a.tagInput.val()).length-1)&&0!==b.trim(a.tagInput.val()).length-1))c.which===b.ui.keyCode.ENTER&&""===a.tagInput.val()||c.preventDefault(),a.options.autocomplete.autoFocus&&a.tagInput.data("autocomplete-open")||(a.tagInput.autocomplete("close"),a.createTag(a._cleanedInput()))}).blur(function(b){a.tagInput.data("autocomplete-open")||
a.createTag(a._cleanedInput())});if(this.options.availableTags||this.options.tagSource||this.options.autocomplete.source)d={select:function(b,c){a.createTag(c.item.value);return!1}},b.extend(d,this.options.autocomplete),d.source=this.options.tagSource||d.source,this.tagInput.autocomplete(d).bind("autocompleteopen.tagit",function(b,c){a.tagInput.data("autocomplete-open",!0)}).bind("autocompleteclose.tagit",function(b,c){a.tagInput.data("autocomplete-open",!1)}),this.tagInput.autocomplete("widget").addClass("tagit-autocomplete")},
destroy:function(){b.Widget.prototype.destroy.call(this);this.element.unbind(".tagit");this.tagList.unbind(".tagit");this.tagInput.removeData("autocomplete-open");this.tagList.removeClass("tagit ui-widget ui-widget-content ui-corner-all tagit-hidden-field");this.element.is("input")?(this.element.removeClass("tagit-hidden-field"),this.tagList.remove()):(this.element.children("li").each(function(){b(this).hasClass("tagit-new")?b(this).remove():(b(this).removeClass("tagit-choice ui-widget-content ui-state-default ui-state-highlight ui-corner-all remove tagit-choice-editable tagit-choice-read-only"),
b(this).text(b(this).children(".tagit-label").text()))}),this.singleFieldNode&&this.singleFieldNode.remove());return this},_cleanedInput:function(){return b.trim(this.tagInput.val().replace(/^"(.*)"$/,"$1"))},_lastTag:function(){return this.tagList.find(".tagit-choice:last:not(.removed)")},_tags:function(){return this.tagList.find(".tagit-choice:not(.removed)")},assignedTags:function(){var a=this,c=[];this.options.singleField?(c=b(this.options.singleFieldNode).val().split(this.options.singleFieldDelimiter),
""===c[0]&&(c=[])):this._tags().each(function(){c.push(a.tagLabel(this))});return c},_updateSingleTagsField:function(a){b(this.options.singleFieldNode).val(a.join(this.options.singleFieldDelimiter)).trigger("change")},_subtractArray:function(a,c){for(var d=[],f=0;f<a.length;f++)-1==b.inArray(a[f],c)&&d.push(a[f]);return d},tagLabel:function(a){return this.options.singleField?b(a).find(".tagit-label:first").text():b(a).find("input:first").val()},_showAutocomplete:function(){this.tagInput.autocomplete("search",
"")},_findTagByLabel:function(a){var c=this,d=null;this._tags().each(function(f){if(c._formatStr(a)==c._formatStr(c.tagLabel(this)))return d=b(this),!1});return d},_isNew:function(a){return!this._findTagByLabel(a)},_formatStr:function(a){return this.options.caseSensitive?a:b.trim(a.toLowerCase())},_effectExists:function(a){return Boolean(b.effects&&(b.effects[a]||b.effects.effect&&b.effects.effect[a]))},createTag:function(a,c,d){var f=this;a=b.trim(a);this.options.preprocessTag&&(a=this.options.preprocessTag(a));
if(""===a)return!1;if(!this.options.allowDuplicates&&!this._isNew(a))return a=this._findTagByLabel(a),!1!==this._trigger("onTagExists",null,{existingTag:a,duringInitialization:d})&&this._effectExists("highlight")&&a.effect("highlight"),!1;if(this.options.tagLimit&&this._tags().length>=this.options.tagLimit)return this._trigger("onTagLimitExceeded",null,{duringInitialization:d}),!1;var g=b(this.options.onTagClicked?'<a class="tagit-label"></a>':'<span class="tagit-label"></span>').text(a),e=b("<li></li>").addClass("tagit-choice ui-widget-content ui-state-default ui-corner-all").addClass(c).append(g);
this.options.readOnly?e.addClass("tagit-choice-read-only"):(e.addClass("tagit-choice-editable"),c=b("<span></span>").addClass("ui-icon ui-icon-close"),c=b('<a><span class="text-icon">\u00d7</span></a>').addClass("tagit-close").append(c).click(function(a){f.removeTag(e)}),e.append(c));this.options.singleField||(g=g.html(),e.append('<input type="hidden" value="'+g+'" name="'+this.options.fieldName+'" class="tagit-hidden-field" />'));!1!==this._trigger("beforeTagAdded",null,{tag:e,tagLabel:this.tagLabel(e),
duringInitialization:d})&&(this.options.singleField&&(g=this.assignedTags(),g.push(a),this._updateSingleTagsField(g)),this._trigger("onTagAdded",null,e),this.tagInput.val(""),this.tagInput.parent().before(e),this._trigger("afterTagAdded",null,{tag:e,tagLabel:this.tagLabel(e),duringInitialization:d}),this.options.showAutocompleteOnFocus&&!d&&setTimeout(function(){f._showAutocomplete()},0))},removeTag:function(a,c){c="undefined"===typeof c?this.options.animate:c;a=b(a);this._trigger("onTagRemoved",
null,a);if(!1!==this._trigger("beforeTagRemoved",null,{tag:a,tagLabel:this.tagLabel(a)})){if(this.options.singleField){var d=this.assignedTags(),f=this.tagLabel(a),d=b.grep(d,function(a){return a!=f});this._updateSingleTagsField(d)}if(c){a.addClass("removed");var d=this._effectExists("blind")?["blind",{direction:"horizontal"},"fast"]:["fast"],g=this;d.push(function(){a.remove();g._trigger("afterTagRemoved",null,{tag:a,tagLabel:g.tagLabel(a)})});a.fadeOut("fast").hide.apply(a,d).dequeue()}else a.remove(),
this._trigger("afterTagRemoved",null,{tag:a,tagLabel:this.tagLabel(a)})}},removeTagByLabel:function(a,b){var d=this._findTagByLabel(a);if(!d)throw"No such tag exists with the name '"+a+"'";this.removeTag(d,b)},removeAll:function(){var a=this;this._tags().each(function(b,d){a.removeTag(d,!1)})}})})(jQuery);
$(function(){
    $('.nav-tabs > li').click(function(event){
        if ($(this).hasClass('disabled')) {
            return false;
        }
    });

    $('body').on('click', '.add-multipliable-input', function(){
        var input=document.createElement('input');
        input.type='text';
        input.name='Apps[permissions]['+$('.multipliable-input').length+']';
        input.placeholder='دسترسی';
        input.className='form-control multipliable-input';
        var container=document.getElementsByClassName('multipliable-input-container');
        $(container).append(input);
        return false;
    });

    $('body').on('click', '.remove-multipliable-input', function(){
        if($('.multipliable-input').length>1)
            $('.multipliable-input-container .multipliable-input:last').remove();
        return false;
    });
});


function submitAjaxForm(form ,url ,loading ,callback) {
    loading = typeof loading !== 'undefined' ? loading : null;
    callback = typeof callback !== 'undefined' ? callback : null;
    $.ajax({
        type: "POST",
        url: url,
        data: form.serialize(),
        dataType: "json",
        beforeSend: function () {
            if(loading)
                loading.show();
        },
        success: function (html) {
            if(loading)
                loading.hide();
            if (typeof html === "object" && typeof html.state === 'undefined') {
                $.each(html, function (key, value) {
                    $("#" + key + "_em_").show().html(value.toString());
                });
            }else
                eval(callback);
        }
    });
}";i:1;N;}