<?php
class ApiController extends ApiBaseController
{
    protected $request = null;

    /**
     * @return array action filters
     */
    public function filters()
    {
        return array(
            'RestAccessControl + index, search, find, list, page, creditPrices, row, forgetPassword, register, resendVerification, verification',
            'RestAuthControl + bookmark, bookmarkList, comment, discount, buy, profile, credit, bin, editProfile, download',
        );
    }

    public function beforeAction($action)
    {
        $this->request = $this->getRequest();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionSearch()
    {
        if (isset($this->request['query']) and !empty($term = trim($this->request['query']))) {
            $limit = 10;
            if (isset($this->request['limit']))
                $limit = $this->request['limit'];

            Yii::import('users.models.*');

            $criteria = new CDbCriteria();

            $criteria->with = ['publisher', 'publisher.userDetails', 'persons', 'category'];

            $criteria->addCondition('t.status=:status AND t.confirm=:confirm AND t.deleted=:deleted AND (SELECT COUNT(book_packages.id) FROM ym_book_packages book_packages WHERE book_packages.book_id=t.id) != 0');
            $criteria->params[':status'] = 'enable';
            $criteria->params[':confirm'] = 'accepted';
            $criteria->params[':deleted'] = 0;
            $criteria->order = 't.confirm_date DESC';

            $terms = explode(' ', $term);
            $condition = '
                ((t.title regexp :term) OR
                (userDetails.fa_name regexp :term OR userDetails.nickname regexp :term) OR
                (persons.name_family regexp :term) OR
                (category.title regexp :term))';
            $criteria->params[":term"] = $term;

            foreach ($terms as $key => $term)
                if ($term) {
                    if ($condition)
                        $condition .= " OR (";
                    $condition .= "
                        (t.title regexp :term$key) OR
                        (userDetails.fa_name regexp :term$key OR userDetails.nickname regexp :term$key) OR
                        (persons.name_family regexp :term$key) OR
                        (category.title regexp :term$key))";
                    $criteria->params[":term$key"] = $term;
                }
            $criteria->together = true;

            $criteria->addCondition($condition);
            $criteria->limit = $limit;

            /* @var Books[] $books */
            $books = Books::model()->findAll($criteria);

            $result = [];
            foreach ($books as $book)
                $result[] = [
                    'id' => intval($book->id),
                    'title' => $book->title,
                    'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                    'publisher_name' => $book->publisher_id ? $book->publisher->userDetails->getPublisherName() : $book->publisher_name,
                    'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                    'rate' => floatval($book->rate),
                    'price' => doubleval($book->price),
                    'hasDiscount' => $book->hasDiscount(),
                    'offPrice' => $book->hasDiscount() ? doubleval($book->offPrice) : 0,
                ];

            if ($result)
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'result' => $result]));
            else
                $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Query variable is required.']));
    }

    /**
     * Get a specific model
     */
    public function actionFind()
    {
        if (isset($this->request['entity']) and isset($this->request['id'])) {
            $entity = $this->request['entity'];
            $criteria = new CDbCriteria();

            switch (trim($entity)) {
                case 'Book':
                    $criteria->addCondition('id = :id');
                    $criteria->params[':id'] = $this->request['id'];
                    $criteria->together = true;
                    /* @var Books $record */
                    $record = Books::model()->find($criteria);

                    if (!$record)
                        $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));

                    Yii::import('users.models.*');
                    Yii::import('comments.models.*');

                    // Get comments
                    $criteria = new CDbCriteria;
                    $criteria->compare('owner_name', 'Books');
                    $criteria->compare('owner_id', $record->id);
                    $criteria->compare('t.status', Comment::STATUS_APPROWED);
                    $criteria->order = 'parent_comment_id, create_time ';
                    $criteria->order .= 'DESC';
                    $criteria->with = 'user';
                    /* @var Comment[] $commentsList */
                    $commentsList = Comment::model()->findAll($criteria);

                    $comments = [];
                    foreach ($commentsList as $comment)
                        $comments[] = [
                            'id' => intval($comment->comment_id),
                            'text' => $comment->comment_text,
                            'username' => $comment->userName,
                            'rate' => $comment->userRate ? floatval($comment->userRate) : -1,
                            'createTime' => doubleval($comment->create_time),
                        ];

                    // Get similar books
                    $criteria = Books::model()->getValidBooks(array($record->category_id));
                    $criteria->addCondition('id!=:id');
                    $criteria->params[':id'] = $record->id;
                    $criteria->limit = 10;
                    /* @var Books[] $similarBooks */
                    $similarBooks = Books::model()->findAll($criteria);

                    $similar = [];
                    foreach ($similarBooks as $book)
                        $similar[] = [
                            'id' => intval($book->id),
                            'title' => $book->title,
                            'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                            'publisher_name' => $book->publisher_id ? $book->publisher->userDetails->getPublisherName() : $book->publisher_name,
                            'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                            'rate' => floatval($book->rate),
                            'price' => doubleval($book->price),
                            'hasDiscount' => $book->hasDiscount(),
                            'offPrice' => $book->hasDiscount() ? doubleval($book->offPrice) : 0,
                        ];

                    $book = [
                        'id' => intval($record->id),
                        'title' => $record->title,
                        'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $record->icon,
                        'publisher_name' => $record->publisher_id ? $record->publisher->userDetails->getPublisherName() : $record->publisher_name,
                        'author' => ($person = $record->getPerson('نویسنده')) ? $person[0]->name_family : null,
                        'rate' => floatval($record->rate),
                        'price' => doubleval($record->hasDiscount() ? $record->offPrice : $record->price),
                        'hasDiscount' => $record->hasDiscount(),
                        'offPrice' => $record->hasDiscount() ? doubleval($record->offPrice) : 0,
                        'description' => strip_tags(str_replace('<br/>', '\n', str_replace('<br>', '\n', $record->description))),
                        'seen' => intval($record->seen),
                        'pagesCount' => intval($record->number_of_pages),
                        'category' => $record->category->title,
                        'comments' => $comments,
                        'similar' => $similar,
                    ];

                    if ($record->preview_file) {
                        $book['previewFile'] = Yii::app()->createAbsoluteUrl('/uploads/books/previews') . '/' . $record->preview_file;
                        $book['previewFileType'] = pathinfo($record->preview_file, PATHINFO_EXTENSION);
                    }

                    if ($record->lastPackage and $record->lastPackage->encrypted == 1) {
                        $fileType = '';
                        if ($record->lastPackage->pdf_file_name)
                            $fileType = 'pdf';
                        elseif ($record->lastPackage->epub_file_name)
                            $fileType = 'epub';

                        $book['fileType'] = $fileType;
                    }

                    break;
                default:
                    $book = null;
                    break;
            }

            if ($book)
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'book' => $book]));
            else
                $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Entity and ID variables is required.']));
    }

    /**
     * Get list of models
     */
    public function actionList()
    {
        if (isset($this->request['entity']) && $entity = $this->request['entity']) {
            $criteria = new CDbCriteria();
            $criteria->limit = 10;
            $criteria->offset = 0;

            // set LIMIT and OFFSET in Query
            if (isset($this->request['limit']) && !empty($this->request['limit']) && $limit = (int)$this->request['limit']) {
                $criteria->limit = $limit;
                if (isset($this->request['offset']) && !empty($this->request['offset']) && $offset = (int)$this->request['offset'])
                    $criteria->offset = $offset;
            }

            // Execute query on model
            $list = [];
            switch (trim($entity)) {
                case 'Category':
                    /* @var BookCategories[] $categories */
                    $categories = BookCategories::model()->findAll($criteria);

                    foreach ($categories as $category)
                        $list[] = [
                            'id' => intval($category->id),
                            'title' => $category->title,
                            'parent_id' => intval($category->parent_id),
                            'path' => $category->path
                        ];
                    break;
                case 'Book':
                    $criteria->addCondition('t.status=:status');
                    $criteria->addCondition('confirm=:confirm');
                    $criteria->addCondition('deleted=:deleted');
                    $criteria->addCondition('(SELECT COUNT(book_packages.id) FROM ym_book_packages book_packages WHERE book_packages.book_id=t.id) != 0');
                    $criteria->params[':status'] = 'enable';
                    $criteria->params[':confirm'] = 'accepted';
                    $criteria->params[':deleted'] = 0;
                    $criteria->order = 'confirm_date DESC';

                    if (isset($this->request['category_id'])) {
                        $criteria->addCondition('category_id = :catID');
                        $criteria->params[':catID'] = $this->request['category_id'];
                    }

                    if (isset($this->request['id_list']))
                        $criteria->addInCondition('id', $this->request['id_list']);

                    /* @var Books[] $books */
                    $books = Books::model()->findAll($criteria);

                    foreach ($books as $book)
                        $list[] = [
                            'id' => intval($book->id),
                            'title' => $book->title,
                            'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                            'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                        ];
                    break;
            }

            if ($list)
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'list' => $list]));
            else
                $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Entity variable is required.']));
    }

    public function actionPage()
    {
        if (isset($this->request['name'])) {
            $text = null;
            Yii::import('pages.models.*');
            switch ($this->request['name']) {
                case "about":
                    $text = Pages::model()->findByPk(10)->summary;
                    break;

                case "help":
                    $text = Pages::model()->findByPk(11)->summary;
                    break;

                case "contact":
                    $text = Pages::model()->findByPk(12)->summary;
                    break;
            }

            if ($text)
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'text' => $text]));
            else
                $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Name variable is required.']));
    }

    public function actionBookmark()
    {
        if (isset($this->request['book_id'])) {
            $model = UserBookBookmark::model()->find('user_id = :user_id AND book_id = :book_id', array(
                ':user_id' => $this->user->id,
                ':book_id' => $this->request['book_id']
            ));

            if (!$model) {
                $model = new UserBookBookmark();
                $model->book_id = $this->request['book_id'];
                $model->user_id = $this->user->id;
                if ($model->save()) {
                    $book = Books::model()->findByPk($this->request['book_id']);
                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'کتاب "' . $book->title . '" با موفقیت نشان شد.']));
                } else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در انجام عملیات خطایی رخ داده است!']));
            } else {
                if (UserBookBookmark::model()->deleteAllByAttributes(array('user_id' => $this->user->id, 'book_id' => $this->request['book_id'])))
                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'عملیات با موفقیت انجام شد.']));
                else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در انجام عملیات خطایی رخ داده است!']));
            }
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Book ID variable is required.']));
    }

    public function actionBookmarkList()
    {
        $list = [];
        foreach ($this->user->bookmarkedBooks as $book)
            $list[] = [
                'id' => intval($book->id),
                'title' => $book->title,
                'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
            ];

        if ($list)
            $this->_sendResponse(200, CJSON::encode(['status' => true, 'list' => $list]));
        else
            $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
    }

    public function actionComment()
    {
        if (isset($this->request['book_id']) and isset($this->request['text'])) {
            Yii::import('comments.models.*');
            /* @var Comment $comment */
            $comment = new Comment();
            $comment->owner_name = "Books";
            $comment->owner_id = $this->request['book_id'];
            $comment->creator_id = $this->user->id;
            $comment->comment_text = $this->request['text'];
            $comment->create_time = time();
            $comment->status = Comment::STATUS_NOT_APPROWED;
            $criteria = new CDbCriteria;
            $criteria->compare('owner_name', $comment->owner_name, true);
            $criteria->compare('owner_id', $comment->owner_id);
            $criteria->compare('parent_comment_id', $comment->parent_comment_id);
            $criteria->compare('creator_id', $comment->creator_id);
            $criteria->compare('user_name', $comment->user_name, false);
            $criteria->compare('user_email', $comment->user_email, false);
            $criteria->compare('comment_text', $comment->comment_text, false);
            $criteria->addCondition('create_time>:time');
            $criteria->params[':time'] = time() - 30;
            $model = Comment::model()->find($criteria);
            if ($model)
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'تا 30 ثانیه دیگر امکان ثبت نظر وجود ندارد.']));
            else {
                if ($comment->save()) {
                    if (isset($this->request['rate'])) {
                        $rateModel = BookRatings::model()->findAllByAttributes(array('user_id' => $comment->creator_id, 'book_id' => $comment->owner_id));
                        if ($rateModel)
                            BookRatings::model()->deleteAllByAttributes(array('user_id' => $comment->creator_id, 'book_id' => $comment->owner_id));
                        $rateModel = new BookRatings();
                        $rateModel->book_id = $comment->owner_id;
                        $rateModel->user_id = $comment->creator_id;
                        $rateModel->rate = $this->request['rate'];
                        @$rateModel->save();
                    }

                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'نظر شما با موفقیت ثبت شد.']));
                } else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در عملیات ثبت خطایی رخ داده است! لطفا مجددا تلاش کنید.']));
            }
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Book ID and Text variables is required.']));
    }

    public function actionDiscount()
    {
        if (isset($this->request['code'])) {
            Yii::app()->getModule('discountCodes');
            $code = $this->request['code'];
            $criteria = DiscountCodes::ValidCodes();
            $criteria->compare('code', $code);
            $discount = DiscountCodes::model()->find($criteria);
            /* @var $discount DiscountCodes */
            if ($discount === NULL)
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'کد تخفیف مورد نظر موجود نیست.']));

            if (!$discount->digital_allow)
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'کد تخفیف مورد نظر مربوط به خرید نسخه چاپی می باشد.']));

            if ($discount->limit_times && $discount->usedCount() >= $discount->limit_times)
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'محدودیت تعداد استفاده از کد تخفیف مورد نظر به اتمام رسیده است.']));

            if ($discount->user_id && $discount->user_id != $this->user->id)
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'کد تخفیف مورد نظر نامعتبر است.']));

            /* @var $used DiscountUsed */
            $used = $discount->codeUsed(array(
                    'condition' => 'user_id = :user_id',
                    'params' => array(':user_id' => $this->user->id),
                )
            );

            if ($used) {
                $u_date = JalaliDate::date('Y/m/d - H:i', $used->date);
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => "کد تخفیف مورد نظر قبلا در تاریخ {$u_date} استفاده شده است."]));
            }

            $this->_sendResponse(200, CJSON::encode(['status' => true, 'discount' => [
                'id' => intval($discount->id),
                'offType' => $discount->off_type == 1 ? 'percent' : 'amount',
                'off' => $discount->off_type == 1 ? floatval($discount->percent) : doubleval($discount->amount)
            ]]));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Code variable is required.']));
    }

    public function actionBuy()
    {
        if (isset($this->request['book_id']) and isset($this->request['payment_method'])) {
            $userID = $this->user->id;
            $id = $this->request['book_id'];
            /* @var Books $model */
            $model = Books::model()->findByPk($id);

            if (Library::BookExistsInLib($model->id, $model->lastPackage->id, $userID))
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'result' => [
                    'hasError' => true,
                    'code' => 600,
                    'type' => 'both',
                    'message' => 'این کتاب در کتابخانه ی شما موجود است.'
                ]]));

            // price with publisher discount or not
            $basePrice = $model->hasDiscount() ? $model->offPrice : $model->price;

            $buy = BookBuys::model()->findByAttributes(array('user_id' => $userID, 'book_id' => $id));

            Yii::app()->getModule('users');
            $user = Users::model()->findByPk($userID);
            /* @var $user Users */
            $price = 0;
            if ($model->publisher_id != $userID) {
                Yii::app()->getModule('discountCodes');
                $price = $basePrice; // price, base price with discount code

                if (isset($this->request['discount_code'])) {
                    $discountCode = DiscountCodes::calculateDiscountCodesManual($price, 'digital', $this->request['discount_code'], $this->user->id);
                    $discountObj = DiscountCodes::model()->findByAttributes(['code' => $discountCode]);
                } else {
                    $discountCode = DiscountCodes::calculateDiscountCodesManual($price, 'digital', null, $this->user->id);
                    $discountObj = DiscountCodes::model()->findByAttributes(['code' => $discountCode]);
                }

                if ($price !== 0) {
                    if ($this->request['payment_method'] == 'credit') {
                        if ($user->userDetails->credit < $price)
                            $this->_sendResponse(400, CJSON::encode(['status' => false, 'result' => [
                                'hasError' => true,
                                'code' => 610,
                                'type' => 'credit',
                                'message' => 'اعتبار فعلی شما کافی نیست!'
                            ]]));

                        $userDetails = UserDetails::model()->findByAttributes(array('user_id' => $userID));
                        $userDetails->setScenario('update-credit');
                        $userDetails->credit = $userDetails->credit - $price;
                        $userDetails->score = $userDetails->score + 1;
                        if ($userDetails->save()) {
                            $buyId = $this->saveBuyInfo($model, $user, 'credit', $basePrice, $price, $discountObj);
                            Library::AddToLib($model->id, $model->lastPackage->id, $user->id);
                            if ($discountCode)
                                DiscountCodes::InsertCodes($user, $discountObj->getAmount($price)); // insert used discount code in db
                            $this->_sendResponse(200, CJSON::encode(['status' => true, 'result' => [
                                'hasError' => false,
                                'code' => 611,
                                'type' => 'credit',
                                'message' => 'خرید شما با موفقیت انجام شد.'
                            ]]));
                        } else
                            $this->_sendResponse(400, CJSON::encode(['status' => false, 'result' => [
                                'hasError' => true,
                                'code' => 612,
                                'type' => 'credit',
                                'message' => 'در انجام عملیات خرید خطایی رخ داده است.'
                            ]]));
                    } elseif ($this->request['payment_method'] == 'gateway') {
                        // Save payment
                        $transaction = new UserTransactions();
                        $transaction->user_id = $userID;
                        $transaction->amount = $price;
                        $transaction->date = time();
                        $transaction->gateway_name = 'زرین پال';
                        $transaction->type = UserTransactions::TRANSACTION_TYPE_BOOK;
                        $transaction->type_id = $model->id;

                        if ($transaction->save()) {
                            $title = $model->title;
                            $gateway = new ZarinPal();
                            $gateway->callback_url = Yii::app()->getBaseUrl(true) . '/book/apiVerify/' . $id . '?platform=mobile&dc=' . urlencode(base64_encode(json_encode($discountCode)));
                            $siteName = Yii::app()->name;
                            $description = "خرید کتاب {$title} از وبسایت {$siteName} از طریق درگاه {$gateway->getGatewayName()}";
                            $result = $gateway->request(doubleval($transaction->amount), $description, $this->user->email, $this->user->userDetails && $this->user->userDetails->phone ? $this->user->userDetails->phone : '0');
                            $transaction->scenario = 'set-authority';
                            $transaction->description = $description;
                            $transaction->authority = $result->getAuthority();
                            $transaction->save();
                            //Redirect to URL You can do it also by creating a form
                            if ($result->getStatus() == 100)
                                $this->_sendResponse(200, CJSON::encode(['status' => true, 'result' => [
                                    'hasError' => false,
                                    'code' => 620,
                                    'type' => 'gateway',
                                    'url' => $gateway->getRedirectUrl()
                                ]]));
                            else
                                $this->_sendResponse(400, CJSON::encode(['status' => false, 'result' => [
                                    'hasError' => true,
                                    'code' => 621,
                                    'type' => 'gateway',
                                    'message' => 'خطای بانکی: ' . $result->getError()
                                ]]));
                        }
                    }
                } else {
                    $buyId = $this->saveBuyInfo($model, $user, 'credit', $basePrice, $price, $discountObj);
                    Library::AddToLib($model->id, $model->lastPackage->id, $userID);
                    if ($discountCode)
                        DiscountCodes::InsertCodes($user, $discountObj->getAmount($price)); // insert used discount code in db
                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'result' => [
                        'hasError' => false,
                        'code' => 601,
                        'type' => 'both',
                        'message' => 'خرید شما با موفقیت انجام شد.'
                    ]]));
                }
            } else
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'result' => [
                    'hasError' => true,
                    'code' => 602,
                    'type' => 'both',
                    'message' => 'شما ناشر این کتاب هستید. امکان خرید وجود ندارد.'
                ]]));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Book ID and Payment Method variables is required.']));
    }

    /**
     * Save buy information
     *
     * @param Books $book
     * @param Users $user
     * @param string $method
     * @param string $price
     * @param string $basePrice
     * @param DiscountCodes $discount
     * @param null $transactionID
     * @return string
     * @throws CException
     */
    private function saveBuyInfo($book, $user, $method, $basePrice, $price, $discount, $transactionID = null)
    {
        $book->download += 1;
        $book->setScenario('update-download');
        $book->save();
        $buy = new BookBuys();
        $buy->book_id = $book->id;
        $buy->base_price = $basePrice;
        $buy->user_id = $user->id;
        $buy->package_id = $book->lastPackage->id;
        $buy->method = $method;
        $buy->price = $price;
        if ($method == 'gateway')
            $buy->rel_id = $transactionID;
        if ($book->publisher) {
            $book->publisher->userDetails->earning = $book->publisher->userDetails->earning + $book->getPublisherPortion($basePrice, $buy);
            $book->publisher->userDetails->save();
        }
        if ($discount && $discount->digital_allow) {
            $buy->discount_code_type = $discount->off_type;
            if ($discount->off_type == DiscountCodes::DISCOUNT_TYPE_PERCENT)
                $buy->discount_code_amount = $discount->percent;
            else if ($discount->off_type == DiscountCodes::DISCOUNT_TYPE_AMOUNT)
                $buy->discount_code_amount = $discount->amount;
        }
        $buy->site_amount = $book->getSitePortion($price, $buy);
        $buy->save();
        $message =
            '<p style="text-align: right;">با سلام<br>کاربر گرامی، جزئیات خرید شما به شرح ذیل می باشد:</p>
            <div style="width: 100%;height: 1px;background: #ccc;margin-bottom: 15px;"></div>
            <table style="font-size: 9pt;text-align: right;">
                <tr>
                    <td style="font-weight: bold;width: 120px;">عنوان کتاب</td>
                    <td>' . CHtml::encode($book->title) . '</td>
                </tr>
                <tr>
                    <td style="font-weight: bold;width: 120px;">قیمت</td>
                    <td>' . Controller::parseNumbers(number_format($price, 0)) . ' تومان</td>
                </tr>';
        if ($method == 'gateway' && $buy->transaction)
            $message .= '<tr>
                    <td style="font-weight: bold;width: 120px;">کد رهگیری</td>
                    <td style="font-weight: bold;letter-spacing:4px">' . CHtml::encode($buy->transaction->token) . ' </td>
                </tr>
                <tr>
                    <td style="font-weight: bold;width: 120px;">روش پرداخت</td>
                    <td style="font-weight: bold;">درگاه ' . CHtml::encode($buy->transaction->gateway_name) . ' </td>
                </tr>';
        elseif ($method == 'credit')
            $message .= '<tr>
                    <td style="font-weight: bold;width: 120px;">روش پرداخت</td>
                    <td style="font-weight: bold;">کسر از اعتبار</td>
                </tr>';
        $message .= '<tr>
                    <td style="font-weight: bold;width: 120px;">تاریخ</td>
                    <td>' . JalaliDate::date('d F Y - H:i', $buy->date) . '</td>
                </tr>
            </table>';
        Mailer::mail($user->email, 'اطلاعات خرید کتاب', $message, Yii::app()->params['noReplyEmail']);
        return $buy->id;
    }

    public function actionProfile()
    {
        $avatar = ($this->user->userDetails->avatar == '') ? Yii::app()->createAbsoluteUrl('/themes/frontend/images/default-user.png') : Yii::app()->createAbsoluteUrl('/uploads/users/avatar') . '/' . $this->user->userDetails->avatar;

        $bookmarked = [];
        foreach ($this->user->bookmarkedBooks as $bookmarkedBook) {
            $arr = [
                'id' => intval($bookmarkedBook->id),
                'title' => $bookmarkedBook->title,
                'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $bookmarkedBook->icon,
                'author' => ($person = $bookmarkedBook->getPerson('نویسنده')) ? $person[0]->name_family : null,
            ];
            array_push($bookmarked, $arr);
        }

        $library = [];
        $boughtBooks = new Library('search');
        $boughtBooks->unsetAttributes();
        $boughtBooks->user_id = $this->user->id;
        foreach ($boughtBooks->search()->getData() as $bookBuy) {
            $arr = [
                'id' => intval($bookBuy->book->id),
                'title' => $bookBuy->book->title,
                'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $bookBuy->book->icon,
                'author' => ($person = $bookBuy->book->getPerson('نویسنده')) ? $person[0]->name_family : null,
            ];
            array_push($library, $arr);
        }

        $this->_sendResponse(200, CJSON::encode(['status' => true, 'user' => [
            'name' => $this->user->userDetails->getShowName(),
            'role' => $this->user->userDetails->roleLabels[$this->user->role->role],
            'avatar' => $avatar,
            'credit' => doubleval($this->user->userDetails->credit),
            'nationalCode' => $this->user->userDetails->national_code,
            'phone' => $this->user->userDetails->phone,
            'zipCode' => $this->user->userDetails->zip_code,
            'address' => $this->user->userDetails->address,
            'bookmarked' => $bookmarked,
            'library' => $library,
        ]]));
    }

    public function actionEditProfile()
    {
        if (isset($this->request['profile'])) {
            $profile = $this->request['profile'];
            $profileFields = [
                'name',
                'national_code',
                'phone',
                'zip_code',
                'address',
            ];

            foreach ($profileFields as $field)
                if (!key_exists($field, $profile))
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'The ' . $field . ' variable does not exist in the Profile array.']));

            /* @var $detailsModel UserDetails */
            $detailsModel = UserDetails::model()->findByAttributes(array('user_id' => $this->user->id));
            $detailsModel->scenario = 'update_profile';
            $detailsModel->fa_name = $profile['name'];
            $detailsModel->national_code = $profile['national_code'];
            $detailsModel->phone = $profile['phone'];
            $detailsModel->zip_code = $profile['zip_code'];
            $detailsModel->address = $profile['address'];
            if ($detailsModel->save())
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'اطلاعات با موفقیت ثبت شد.']));
            else
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در ثبت اطلاعات خطایی رخ داده است. لطفا مجددا تلاش کنید.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Profile variable is required.']));
    }

    public function actionCreditPrices()
    {
        Yii::app()->getModule('setting');
        $prices = SiteSetting::model()->find('name = :name', [':name' => 'buy_credit_options']);
        $prices = array_map(function ($item) {
            return doubleval($item);
        }, json_decode($prices->value));
        if ($prices)
            $this->_sendResponse(200, CJSON::encode(['status' => true, 'prices' => $prices]));
        else
            $this->_sendResponse(404, CJSON::encode(['status' => false, 'message' => 'نتیجه ای یافت نشد.']));
    }

    public function actionCredit()
    {
        if (isset($this->request['amount'])) {
            $model = new UserTransactions();
            $model->user_id = $this->user->id;
            $model->amount = $this->request['amount'];
            $model->date = time();
            $model->gateway_name = 'زرین پال';
            $model->type = UserTransactions::TRANSACTION_TYPE_CREDIT;
            if ($model->save()) {
                $gateway = new ZarinPal();
                $gateway->callback_url = Yii::app()->getBaseUrl(true) . '/users/credit/apiVerify?platform=mobile';
                $siteName = Yii::app()->name;
                $description = "افزایش اعتبار در {$siteName} از طریق درگاه {$gateway->getGatewayName()}";
                $result = $gateway->request(doubleval($model->amount), $description, $this->user->email, $this->user->userDetails && $this->user->userDetails->phone ? $this->user->userDetails->phone : '0');
                $model->scenario = 'set-authority';
                $model->authority = $result->getAuthority();
                $model->save();
                //Redirect to URL You can do it also by creating a form
                if ($result->getStatus() == 100)
                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'url' => $gateway->getRedirectUrl()]));
                else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'خطای بانکی: ' . $result->getError()]));
            } else
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در ثبت اطلاعات خطایی رخ داده است. لطفا مجددا تلاش کنید.']));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Amount variable is required.']));
    }

    public function actionBin()
    {
        if (isset($this->request['code'])) {
            /* @var $voucherForm VoucherForm */
            $voucherForm = new VoucherForm();
            $voucherForm->user_id = $this->user->id;
            $voucherForm->code = $this->request['code'];
            if ($voucherForm->validate()) {
                /* @var $bon UserBons */
                $bon = $voucherForm->getBon();
                $bonRelModel = new UserBonRel();
                $bonRelModel->user_id = $this->user->id;
                $bonRelModel->bon_id = $bon->id;
                $bonRelModel->date = time();
                $bonRelModel->amount = $bon->amount;
                if ($bonRelModel->save()) {
                    /* @var $creditModel UserDetails */
                    $creditModel = UserDetails::model()->findByPk($this->user->id);
                    $creditModel->credit += doubleval($bon->amount);
                    $creditModel->save();
                    $this->_sendResponse(200, CJSON::encode([
                        'status' => true,
                        'message' => CHtml::encode($bon->title) . ' با موفقیت اعمال گردید و مبلغ ' . Controller::parseNumbers(number_format($bon->amount)) . ' تومان به اعتبار شما اضافه شد.',
                        'credit' => intval($creditModel->credit),
                    ]));
                } else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'در ثبت اطلاعات خطایی رخ داده است. لطفا مجددا تلاش کنید.']));
            } else
                $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => $voucherForm->getError('code')]));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Code variable is required.']));
    }

    public function actionIndex()
    {
        $this->_sendResponse(200, CJSON::encode(['status' => true, 'result' => [
            'rows' => [
                'latest' => $this->getRow('latest'),
                'buy' => $this->getRow('buy'),
                'popular' => $this->getRow('popular'),
                'dynamic' => $this->getRow('dynamic'),
            ],
            'ads' => $this->getAds()
        ]]));
    }

    public function actionRow()
    {
        if (isset($this->request['name'])) {
            $limit = 10;
            if (isset($this->request['limit']))
                $limit = $this->request['limit'];

            if ($limit == -1)
                $limit = 30;

            $title = null;
            if ($this->request['name'] == 'dynamic') {
                if (isset($this->request['title']))
                    $title = $this->request['title'];
                else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Title variable is required.']));
            }

            $books = $this->getRow($this->request['name'], $limit, $title);

            if ($this->request['name'] == 'dynamic')
                $books = $books[0]['books'];

            $this->_sendResponse(200, CJSON::encode(['status' => true, 'books' => $books]));
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Name variable is required.']));
    }

    public function actionDownload()
    {
        if (isset($this->request['book_id'])) {
            /* @var $model Books */
            $model = Books::model()->findByPk($this->request['book_id']);
            $fileName = null;
            if ($model->lastPackage->epub_file_name)
                $fileName = $model->lastPackage->epub_file_name;
            elseif ($model->lastPackage->pdf_file_name)
                $fileName = $model->lastPackage->pdf_file_name;
            $token = Yii::app()->JWT->encode($fileName);

            if ($model->price == 0) {
                $model->download += 1;
                $model->setScenario('update-download');
                $model->save();

                $this->_sendResponse(200, CJSON::encode(['status' => true, 'url' => $this->createAbsoluteUrl('/api/downloadFile?token=' . $token)]));
            } else {
                if (Library::BookExistsInLib($model->id, $model->lastPackage->id, $this->user->id)) {
                    $model->download += 1;
                    $model->setScenario('update-download');
                    $model->save();

                    // change book status to downloaded in library
                    /* @var Library $lib */
                    $lib = Library::model()->findByAttributes(array(
                        'book_id' => $model->id,
                        'package_id' => $model->lastPackage->id,
                        'user_id' => $this->user->id
                    ));
                    $lib->download_status = Library::STATUS_DOWNLOADED;
                    $lib->save();

                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'url' => $this->createAbsoluteUrl('/api/downloadFile?token=' . $token)]));
                } else
                    $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'شما اجازه دسترسی به این فایل را ندارید.']));
            }
        } else
            $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'BookID variable is required.']));
    }

    public function actionDownloadFile()
    {
        if (isset($_GET['token'])) {
            $fileName = Yii::app()->JWT->decode($_GET['token']);
            $this->download($fileName, Yii::getPathOfAlias("webroot") . '/uploads/books/files');
        }
    }

    protected function download($fileName, $filePath, $fakeFileName = null)
    {
        if (!$fakeFileName)
            $fakeFileName = $fileName;
        $realFileName = $fileName;

        $fileName = $filePath . DIRECTORY_SEPARATOR . $realFileName;
        $ext = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
        switch ($ext) {
            case 'pdf':
                $mimeType = 'application/pdf';
                break;
            case 'epub':
                $mimeType = 'application/epub+zip';
                break;
            default:
                $mimeType = 'application/octet-stream';
                break;
        }

        header('Pragma: public');    // required
        header('Expires: 0');        // no cache
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($fileName)) . ' GMT');
        header('Cache-Control: private', false);
        header('Content-Type: ' . $mimeType);
        header('Content-Disposition: attachment; filename="' . $fakeFileName . '"');
        header('Content-Transfer-Encoding: binary');
        header('Content-Length: ' . filesize($fileName));    // provide file size
        header('Connection: close');
        echo readfile($fileName);
        exit();
    }

    /**
     * Get books in a row
     *
     * @param string $name
     * @param integer $limit
     * @param string $title
     * @return array
     */
    public function getRow($name = null, $limit = null, $title = null)
    {
        if (!is_null($name)) {
            if (is_null($limit))
                $limit = 10;

            Yii::import('rows.models.*');
            Yii::import('users.models.*');

            $books = $list = [];

            /* @var $row RowsHomepage */
            if ($name == 'dynamic') {
                $rows = RowsHomepage::model()->findAll(RowsHomepage::model()->getActiveRows(false, $title));
                foreach ($rows as $row) {
                    if ($row && $row->status == 1)
                        $books = Books::model()->findAll($row->getConstCriteria(Books::model()->getValidBooks(null, 'id DESC', $limit)));

                    $tempList = [];
                    foreach ($books as $book)
                        $tempList[] = [
                            'id' => intval($book->id),
                            'title' => $book->title,
                            'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                            'publisher_name' => $book->publisher_id ? $book->publisher->userDetails->getPublisherName() : $book->publisher_name,
                            'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                            'rate' => floatval($book->rate),
                            'price' => doubleval($book->price),
                            'hasDiscount' => $book->hasDiscount(),
                            'offPrice' => $book->hasDiscount() ? doubleval($book->offPrice) : 0,
                        ];

                    $list[] = [
                        'title' => $row->title,
                        'books' => $tempList,
                    ];
                }
            } else {
                $row = RowsHomepage::model()->findByAttributes(array('query' => $name));
                /* @var Books[] $books */
                if ($row && $row->status == 1)
                    $books = Books::model()->findAll($row->getConstCriteria(Books::model()->getValidBooks(null, 'id DESC', $limit)));

                foreach ($books as $book)
                    $list[] = [
                        'id' => intval($book->id),
                        'title' => $book->title,
                        'icon' => Yii::app()->createAbsoluteUrl('/uploads/books/icons') . '/' . $book->icon,
                        'publisher_name' => $book->publisher_id ? $book->publisher->userDetails->getPublisherName() : $book->publisher_name,
                        'author' => ($person = $book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                        'rate' => floatval($book->rate),
                        'price' => doubleval($book->price),
                        'hasDiscount' => $book->hasDiscount(),
                        'offPrice' => $book->hasDiscount() ? doubleval($book->offPrice) : 0,
                    ];
            }

            return $list;
        } else
            return [];
    }

    public function getAds()
    {
        Yii::import('advertises.models.*');
        $advertises = new CActiveDataProvider('Advertises', array(
            'criteria' => Advertises::model()->getActiveAdvertises()
        ));

        if ($advertises->totalItemCount != 0) {
            $advertisesTemp = [];
            foreach ($advertises->getData() as $ads) {
                /* @var $ads Advertises */
                $advertisesTemp[] = [
                    'book' => [
                        'id' => $ads->book_id,
                        'title' => $ads->book->title,
                        'author' => ($person = $ads->book->getPerson('نویسنده')) ? $person[0]->name_family : null,
                    ],
                    'cover' => Yii::app()->createAbsoluteUrl('/uploads/advertisesCover') . '/' . $ads->cover,
                ];
            }

            return $advertisesTemp;
        } else
            return [];
    }

    public function actionForgetPassword()
    {
        if (isset($this->request[Users::$verification_field])) {
            $model = Users::model()->findByAttributes(array(Users::$verification_field => $this->request[Users::$verification_field]));
            if ($model) {
                if ($model->status == 'active') {
                    if ($model->change_password_request_count != 3) {
                        if (Users::$verification_field == 'email') {
                            $token = md5($model->id . '#' . $model->password . '#' . $model->email . '#' . $model->create_date . '#' . time());
                            $count = intval($model->change_password_request_count);
                            $model->updateByPk($model->id, array('verification_token' => $token, 'change_password_request_count' => $count + 1));
                            $message = '<div style="color: #2d2d2d;font-size: 14px;text-align: right;">با سلام<br>بنا به درخواست شما جهت تغییر کلمه عبور لینک زیر خدمتتان ارسال گردیده است.</div>';
                            $message .= '<div style="text-align: right;font-size: 9pt;">';
                            $message .= '<a href="' . Yii::app()->getBaseUrl(true) . '/users/public/changePassword/token/' . $token . '">' . Yii::app()->getBaseUrl(true) . '/users/public/changePassword/token/' . $token . '</a>';
                            $message .= '</div>';
                            $message .= '<div style="font-size: 8pt;color: #888;text-align: right;">اگر شخص دیگری غیر از شما این درخواست را صادر نموده است، یا شما کلمه عبور خود را به یاد آورده‌اید و دیگر نیازی به تغییر آن ندارید، کلمه عبور قبلی/موجود شما همچنان فعال می‌باشد و می توانید از طریق <a href="' . ((strpos($_SERVER['SERVER_PROTOCOL'], 'https')) ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . '/login">این صفحه</a> وارد حساب کاربری خود شوید.</div>';
                            $result = Mailer::mail($model->email, 'درخواست تغییر کلمه عبور در ' . Yii::app()->name, $message, Yii::app()->params['noReplyEmail'], Yii::app()->params['SMTP']);
                            if ($result)
                                $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'لینک تغییر کلمه عبور به ' . $model->email . ' ارسال شد.']));
                            else
                                $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'در ارسال ایمیل خطایی رخ داده است لطفا مجددا تلاش کنید.']));
                        } elseif (Users::$verification_field == 'mobile') {
                            Yii::import('users.controllers.UsersPublicController');
                            $result = UsersPublicController::newPasswordSendSms($model);
                            if ($result->status)
                                echo CJSON::encode(['status' => $result->status, 'message' => 'کلمه عبور جدید از طریق پیامک برای شما ارسال گردید.']);
                            else
                                echo CJSON::encode(['status' => $result->status, 'message' => $result->msg]);
                        }
                    } else
                        echo CJSON::encode(array(
                            'hasError' => true,
                            'message' => 'بیش از 3 بار نمی توانید درخواست تغییر کلمه عبور بدهید.'
                        ));
                } elseif ($model->status == 'pending')
                    $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'این حساب کاربری هنوز فعال نشده است.']));
                elseif ($model->status == 'blocked')
                    $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'این حساب کاربری مسدود می باشد.']));
                elseif ($model->status == 'deleted')
                    $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'این حساب کاربری حذف شده است.']));
            } else
                $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'کاربر موردنظر در سیستم ثبت نشده است.']));
        }
        $this->_sendResponse(400, CJSON::encode(['status' => false, 'message' => 'Phone number is required.']));
    }

    public function actionRegister()
    {
        if (isset($this->request['mobile']) && isset($this->request['password'])) {
            Yii::import('users.controllers.UsersPublicController');
            $register = new Users('create');
            $register->mobile = $this->request['mobile'];
            $register->password = $this->request['password'];
            $register->status = 'pending';
            $register->create_date = time();
            if ($register->save()) {
                if (Users::$verification_field == 'email') {
                    $token = md5($register->id . '#' . $register->password . '#' . $register->email . '#' . $register->create_date);
                    $register->updateByPk($register->id, array('verification_token' => $token));
                    $message = '<div style="color: #2d2d2d;font-size: 14px;text-align: right;">با سلام<br>برای فعال کردن حساب کاربری خود در ' . Yii::app()->name . ' بر روی لینک زیر کلیک کنید:</div>';
                    $message .= '<div style="text-align: right;font-size: 9pt;">';
                    $message .= '<a href="' . Yii::app()->getBaseUrl(true) . '/users/public/verify/token/' . $token . '">' . Yii::app()->getBaseUrl(true) . '/users/public/verify/token/' . $token . '</a>';
                    $message .= '</div>';
                    $message .= '<div style="font-size: 8pt;color: #888;text-align: right;">این لینک فقط 3 روز اعتبار دارد.</div>';
                    Mailer::mail($register->email, 'ثبت نام در ' . Yii::app()->name, $message, Yii::app()->params['noReplyEmail']);
                    $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'ایمیل فعال سازی به پست الکترونیکی شما ارسال شد. لطفا پست الکترونیکی خود را فعال کنید.']));
                } elseif (Users::$verification_field == 'mobile') {
                    $result = UsersPublicController::sendVerificationSms($register->mobile);
                    if ($result->status)
                        $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'پیامک فعالسازی با موفقیت ارسال گردید.']));
                    else
                        $this->_sendResponse(200, CJSON::encode(['status' => $result->status, 'message' => $result->msg]));
                }
            }else
                $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => $this->implodeErrors($register)]));
            $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'در انجام فرآیند ثبت نام مشکلی به وجود آمده است.']));
        }else
            $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'شماره تلفن یا کلمه عبور وارد نشده است.']));
    }


    public function actionResendVerification()
    {
        if (Users::$verification_field == 'mobile' && isset($this->request['mobile'])) {
            Yii::import('users.controllers.UsersPublicController');
            $result = UsersPublicController::sendVerificationSms($this->request['mobile']);
            if ($result->status)
                $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'پیامک فعالسازی با موفقیت ارسال گردید.']));
            else
                $this->_sendResponse(200, CJSON::encode(['status' => $result->status, 'message' => $result->msg]));
        } else
            $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'شماره تلفن ارسال نشده است.']));
    }

    public function actionVerification()
    {
        if (Users::$verification_field == 'mobile' && isset($this->request['mobile'])) {
            $mobile = $this->request['mobile'];
            $model = Users::model()->findByAttributes(['mobile' => $mobile]);
            if ($model) {
                if (isset($this->request['code'])) {
                    $code = $this->request['code'];
                    if ($model->status == 'pending') {
                        if (empty($code) || $code != $model->verification_token)
                            $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'کد فعالسازی نامعتبر است.']));

                        $model->updateByPk($model->id, array('status' => 'active'));
                        $this->_sendResponse(200, CJSON::encode(['status' => true, 'message' => 'حساب کاربری شما فعال گردید.']));
                    } elseif ($model->status == 'active')
                        $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'حساب کاربری شما قبلا فعال شده است.']));
                    else
                        $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'امکان فعال سازی این کاربر وجود ندارد. لطفا مجددا ثبت نام کنید.']));
                }
            }
            $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'شماره تلفن ارسالی در سیستم ثبت نشده است.']));
        }
        $this->_sendResponse(200, CJSON::encode(['status' => false, 'message' => 'شماره تلفن ارسال نشده است.']));
    }

    /**
     * @param $model CActiveRecord
     * @return string
     */
    public function implodeErrors($model)
    {
        $errors = '';
        foreach ($model->getErrors() as $err) {
            $errors .= implode('<br>', $err) . '<br>';
        }
        return $errors;
    }
}